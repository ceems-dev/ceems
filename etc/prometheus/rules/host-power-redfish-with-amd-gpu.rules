---
# Recording rules for scrape job <job>
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
# Placeholders to replace:
# <job>: Prometheus job name
# <gpu_job>: Prometheus job name under which DCGM exporter is running on the same host
# <chassis_name>: Chassis name of Redfish which reports the host power usage including GPUs
# <eval_interval>: Evaluation interval
# <rate_interval>: Rate interval
#
groups:
  - name: compute-unit-rules-<job>
    interval: <eval_interval>
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="<job>"}[<rate_interval>])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="<job>"}[<rate_interval>])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="<job>"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="<job>"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="<job>"} > 0)

      # Total power (Watts) consumed by the instance by accounting Power Usage Effectiveness (PUE) value.
      - record: instance:ceems_redfish_current_watts:pue
        expr: 1 * (label_replace(ceems_redfish_current_watts{job="<job>",chassis="<chassis_name>"}, "instancehost", "$1", "instance", "([^:]+):\\d+") - on (instancehost) group_left () sum by (instancehost) (label_replace(amg_gpu_power_watts{job="<job_gpu>"} / 1e6,  "instancehost", "$1", "instance", "([^:]+):\\d+"))) > 0

      # Total host power (Watts) consumed by the compute unit accounting PUE value.
      #
      # Firstly, we make an assumption that 90% of power is consumed by CPU, DRAM and 10% by other
      # peripherals like network, storage, etc.
      #
      # (If the assumption does not fit your infrastructure, you can manually change the values
      # in the rules. For instance, if the server has many storage disks, the 10 % can be increased
      # further to account for disk power consumption.)
      #
      # We leverage RAPL package and DRAM counters to split the rest of 90% power between CPU and DRAM
      # components, when available. When RAPL counters are not available, we assume all 90% power 
      # is consumed by CPU.
      #
      # At node level, power consumed by CPU and DRAM can be estimated as
      #
      # Total CPU Power = 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) 
      # Total CPU DRAM Power = 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM))
      #
      # Now we have power usage at node level for CPU and DRAM. We split it further at the
      # compute unit level using CPU time and DRAM usage by the compute unit. For rest of
      # of the power usage like network, storage, we split it equally among all compute units 
      # that running on the node at a given time.
      #
      # Compute Unit CPU Power = Total CPU Power * (Compute CPU Time / Total CPU Time)
      # Compute Unit CPU Memory Power = Total CPU DRAM Power * (Compute Unit Memory / Total Memory)
      # Misc Power Usage by Compute Unit = 0.1 * Total Power / Number of Compute Units
      #
      # Total Compute Unit Host Power = Compute Unit CPU Power + Compute Unit CPU Memory Power + Misc Power Usage by Compute Unit
      #
      - record: uuid:ceems_host_power_watts:pue
        expr: |2
            0.9 * instance:ceems_redfish_current_watts:pue{job="<job>"} # Assumption 90% Power usage by CPU, CPU memory and other peripherals.
                * on (instance) group_left () # 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) -> Total CPU Power
                  (
                      sum by (instance) (irate(ceems_rapl_package_joules_total{job="<job>"}[<rate_interval>]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="<job>"}[<rate_interval>]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="<job>"}[<rate_interval>]))
                      )
                  )
              * on (instance) group_right () # Total CPU Power * (Compute CPU Time / Total CPU Time) -> Compute Unit CPU Power
                (
                    (
                        irate(ceems_compute_unit_cpu_user_seconds_total{job="<job>"}[<rate_interval>])
                      +
                        irate(ceems_compute_unit_cpu_system_seconds_total{job="<job>"}[<rate_interval>])
                    )
                  / on (instance) group_left ()
                    sum by (instance) (irate(ceems_cpu_seconds_total{job="<job>",mode!~"idle|iowait|steal"}[<rate_interval>]))
                )
            +
                  0.9 * instance:ceems_redfish_current_watts:pue{job="<job>"}
                * on (instance) group_left () # 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM)) -> Total CPU Memory Power
                  (
                      sum by (instance) (irate(ceems_rapl_dram_joules_total{job="<job>"}[<rate_interval>]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="<job>"}[<rate_interval>]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="<job>"}[<rate_interval>]))
                      )
                  )
              * on (instance) group_right () # Total CPU Memory Power * (Compute Unit Memory / Total Memory) -> Compute Unit CPU Memory Power
                (
                    ceems_compute_unit_memory_used_bytes{job="<job>"}
                  / on (instance) group_left ()
                    (
                        ceems_meminfo_MemTotal_bytes{job="<job>"}
                      - on (instance)
                        ceems_meminfo_MemAvailable_bytes{job="<job>"}
                    )
                )
            +
                0.1 * instance:ceems_redfish_current_watts:pue{job="<job>"} # Total Misc Power Usage
              * on (instance) group_right () # Total Misc Power usage / Number of Compute Units -> Misc Power Usage by Compute Unit
                (
                    ceems_compute_unit_memory_used_bytes{job="<job>"}
                  /
                    (
                        ceems_compute_unit_memory_used_bytes{job="<job>"}
                      * on (instance) group_left ()
                        ceems_compute_units{job="<job>"}
                    ) > 0
                )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_host_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_host_power_watts:pue{job="<job>"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"} 


  # The following recording rules estimate the average CPU, CPU memory usages and
  # total host power (excluding GPUs) and its equivalent emissions aggregared for all hosts 
  # per Prometheus job.
  # 
  - name: host-agg-rules-<job>
    interval: <eval_interval>
    rules:
      # Average CPU usage (%) of all hosts in a Prometheus job. It is percentage of CPU cycles spent by the host.
      - record: job:ceems_cpu_usage:avg_ratio_irate
        expr: |2
          avg by (job) (
            (
                  sum by (job, instance) (
                    irate(ceems_cpu_seconds_total{job="<job>",mode!~"idle|iowait|steal"}[<rate_interval>])
                  )
                *
                  100
              / on (instance) group_left ()
                ((ceems_cpu_count{job="<job>"} > 0) / ceems_cpu_per_core_count{job="<job>"})
            )
          )

      # Average CPU usage (%) of all hosts in a Prometheus job. It is percentage of CPU memory used by host relative to
      # the available memory to the host.
      - record: job:ceems_cpu_memory_usage:avg_ratio
        expr: |2
          avg by (job) (
              (
                (
                    1
                  -
                    (ceems_meminfo_MemAvailable_bytes{job="<job>"} / ceems_meminfo_MemTotal_bytes{job="<job>"})
                )
              )
            )
          *
            100

      # Total power (Watts) consumed by all hosts excluding GPUs in a Prometheus job accounting PUE value.
      - record: job:ceems_host_power_watts:pue
        expr: |2
          sum by (job) (1 * (label_replace(ceems_redfish_current_watts{job="<job>",chassis="<chassis_name>"}, "instancehost", "$1", "instance", "([^:]+):\\d+") - on (instancehost) group_left () sum by (instancehost) (label_replace(amg_gpu_power_watts{job="<gpu_job>"} / 1e6,  "instancehost", "$1", "instance", "([^:]+):\\d+"))) > 0)

      # Total equivalent emissions rate (g/s) due to the power consumed by all ths hosts excluding GPUs
      # in a Prometheus job accounting PUE value.
      # The equivalent emissions are estimated for country FR
      - record: job:ceems_host_emissions_g_s:pue
        expr: |2
          sum by (job, country_code, country, provider) (
            (
                job:ceems_host_power_watts:pue{job="<job>"} / 3.6e+06
              * on (job) group_right ()
                label_replace(ceems_emissions_gCo2_kWh, "job", "<job>", "instance", "(.*)")
            )
          )
