amd-gpu.rules
---
# Recording rules for AMD GPUs in cpu-cray-amd-gpu
#
# We leverage these rules to include PUE (Power Usage Effectiveness) in the Power
# estimation as well.
#
groups:
  - name: compute-unit-gpu-rules-cpu-cray-amd-gpu
    rules:
      # GPU Usage (%) by compute unit
      - record: uuid:ceems_compute_unit_gpu_usage:ratio
        expr: |2
            amd_gpu_use_percent{job="amd-gpu"}
            * on (index) group_right ()
            ceems_compute_unit_gpu_index_flag{job="cpu-cray-amd-gpu"}

      # GPU Memory Usage (%) by compute unit
      - record: uuid:ceems_compute_unit_gpu_memory_usage:ratio
        expr: |2
          amd_gpu_memory_use_percent{job="amd-gpu"}
          * on (index) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-cray-amd-gpu"}
      
      # Total power (Watts) consumed by the GPU by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      # AMD GPU power is in micro Watts and we need to convert it to Watts here
      - record: dev:amg_gpu_power_watts:pue
        expr: 1 * amg_gpu_power{job="amd-gpu"} / 1e6

      - record: uuid:ceems_compute_unit_gpu_power_watts:pue
        expr: |2
          dev:amg_gpu_power_watts:pue{job="amd-gpu"}
          * on (index) group_right()
          ceems_compute_unit_gpu_index_flag{job="cpu-cray-amd-gpu"}

      # Total equivalent emissions rate (g/s) from GPU due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_gpu_emissions_g_s:pue
        expr: |2
          label_replace(
              dev:amg_gpu_power_watts:pue{job="amd-gpu"} / 3.6e+06
            * on (index) group_right ()
              ceems_compute_unit_gpu_index_flag{job="cpu-cray-amd-gpu"},
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            label_replace(
              ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"},
              "common_label",
              "mock",
              "instance",
              "(.*)"
            ) 

cpu-only-ipmi.rules
---
# Recording rules for scrape job cpu-only-ipmi
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
groups:
  - name: compute-unit-rules-cpu-only-ipmi
    interval: 1s
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_compute_unit_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-only-ipmi"}[2s])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-only-ipmi"}[2s])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="cpu-only-ipmi"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_compute_unit_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="cpu-only-ipmi"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="cpu-only-ipmi"} > 0)

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      #
      - record: instance:ceems_ipmi_dcmi_current_watts:pue
        expr: 1 * ceems_ipmi_dcmi_current_watts{job="cpu-only-ipmi"}

      # Total power (Watts) consumed by the compute unit including PUE value.
      #
      # Firstly, we make an assumption that 90% of power is consumed by CPU, DRAM and 10% by other
      # peripherals like network, storage, etc.
      #
      # We leverage RAPL package and DRAM to split the rest of 90% power between CPU and DRAM
      # components, when available. When RAPL counters are not available, we assume all 90% power 
      # is consumed by CPU.
      #
      # At node level, power consumed by CPU and DRAM can be estimated as
      #
      # Total CPU Power = 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) 
      # Total CPU DRAM Power = 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM))
      #
      # Now we have power usage at node level for CPU and DRAM. We split it further at the
      # compute unit level using CPU time and DRAM usage by the compute unit. For rest of
      # of the power usage like network, storage, we split it equally among all compute units 
      # that running on the node at a given time.
      #
      # Compute Unit CPU Power = Total CPU Power * (Compute CPU Time / Total CPU Time)
      # Compute Unit CPU Memory Power = Total CPU DRAM Power * (Compute Unit Memory / Total Memory)
      # Misc Power Usage by Compute Unit = 0.1 * Total Power / Number of Compute Units
      #
      # Total Compute Unit Power = Compute Unit CPU Power + Compute Unit CPU Memory Power + Misc Power Usage by Compute Unit
      #
      - record: uuid:ceems_compute_unit_cpu_power_watts:pue
        expr: |2
            0.9 * instance:ceems_ipmi_dcmi_current_watts:pue{job="cpu-only-ipmi"} # Assumption 90% Power usage by CPU, CPU memory and other peripherals.
                * on (instance) group_left () # 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) -> Total CPU Power
                  (
                      sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-ipmi"}[2s]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-ipmi"}[2s]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-ipmi"}[2s]))
                      )
                  )
              * on (instance) group_right () # Total CPU Power * (Compute CPU Time / Total CPU Time) -> Compute Unit CPU Power
                (
                    (
                        irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-only-ipmi"}[2s])
                      +
                        irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-only-ipmi"}[2s])
                    )
                  / on (instance) group_left ()
                    sum by (instance) (irate(ceems_cpu_seconds_total{job="cpu-only-ipmi",mode!~"idle|iowait|steal"}[2s]))
                )
            +
                  0.9 * instance:ceems_ipmi_dcmi_current_watts:pue{job="cpu-only-ipmi"}
                * on (instance) group_left () # 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM)) -> Total CPU Memory Power
                  (
                      sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-ipmi"}[2s]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-ipmi"}[2s]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-ipmi"}[2s]))
                      )
                  )
              * on (instance) group_right () # Total CPU Memory Power * (Compute Unit Memory / Total Memory) -> Compute Unit CPU Memory Power
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-only-ipmi"}
                  / on (instance) group_left ()
                    (
                        ceems_meminfo_MemTotal_bytes{job="cpu-only-ipmi"}
                      - on (instance)
                        ceems_meminfo_MemAvailable_bytes{job="cpu-only-ipmi"}
                    )
                )
            +
                0.1 * instance:ceems_ipmi_dcmi_current_watts:pue{job="cpu-only-ipmi"} # Total Misc Power Usage
              * on (instance) group_right () # Total Misc Power usage / Number of Compute Units -> Misc Power Usage by Compute Unit
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-only-ipmi"}
                  /
                    (
                        ceems_compute_unit_memory_used_bytes{job="cpu-only-ipmi"}
                      * on (instance) group_left ()
                        ceems_compute_units{job="cpu-only-ipmi"}
                    ) > 0
                )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_cpu_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_compute_unit_cpu_power_watts:pue{job="cpu-only-ipmi"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"}  

nvidia-gpu.rules
---
# Recording rules for NVIDIA GPUs in cpu-redfish-nvidia-gpu
#
# We leverage these rules to include PUE (Power Usage Effectiveness) in the Power
# estimation as well.
#
groups:
  - name: compute-unit-gpu-rules-cpu-redfish-nvidia-gpu
    rules:
      # GPU Usage (%) by compute unit
      - record: uuid:ceems_compute_unit_gpu_usage:ratio
        expr: |2
            DCGM_FI_DEV_GPU_UTIL{job="nvidia-gpu"}
            * on (gpuuuid) group_right ()
            ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"}

      # GPU Memory Usage (%) by compute unit
      - record: uuid:ceems_compute_unit_gpu_memory_usage:ratio
        expr: |2
          (
              DCGM_FI_DEV_FB_USED{job="nvidia-gpu"} * 100
            /
              (DCGM_FI_DEV_FB_USED{job="nvidia-gpu"} + DCGM_FI_DEV_FB_FREE{job="nvidia-gpu"})
          )
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"}
      
      # Total power (Watts) consumed by the GPU by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      - record: dev:DCGM_FI_DEV_POWER_USAGE:pue
        expr: 1 * DCGM_FI_DEV_POWER_USAGE{job="nvidia-gpu"}

      - record: uuid:ceems_compute_unit_gpu_power_watts:pue
        expr: |2
          dev:DCGM_FI_DEV_POWER_USAGE:pue{job="nvidia-gpu"}
          * on (gpuuuid) group_right()
          ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"}

      # Total equivalent emissions rate (g/s) from GPU due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_gpu_emissions_g_s:pue
        expr: |2
          label_replace(
              dev:DCGM_FI_DEV_POWER_USAGE:pue{job="nvidia-gpu"} / 3.6e+06
            * on (gpuuuid) group_right ()
              ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"},
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            label_replace(
              ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"},
              "common_label",
              "mock",
              "instance",
              "(.*)"
            ) 

      # Profiling metrics

      - record: uuid:ceems_compute_unit_gpu_sm_active:ratio
        expr: |2
          DCGM_FI_PROF_SM_ACTIVE{job="nvidia-gpu"} * 100
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"}

      - record: uuid:ceems_compute_unit_gpu_sm_occupancy:ratio
        expr: |2
          DCGM_FI_PROF_SM_OCCUPANCY{job="nvidia-gpu"} * 100
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"}

      - record: uuid:ceems_compute_unit_gpu_gr_engine_active:ratio
        expr: |2
          DCGM_FI_PROF_GR_ENGINE_ACTIVE{job="nvidia-gpu"} * 100
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-redfish-nvidia-gpu"}

cpu-redfish-nvidia-gpu.rules
---
# Recording rules for scrape job cpu-redfish-nvidia-gpu
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
groups:
  - name: compute-unit-rules-cpu-redfish-nvidia-gpu
    interval: 1s
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_compute_unit_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-redfish-nvidia-gpu"}[2s])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-redfish-nvidia-gpu"}[2s])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="cpu-redfish-nvidia-gpu"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_compute_unit_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="cpu-redfish-nvidia-gpu"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="cpu-redfish-nvidia-gpu"} > 0)

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      #
      # Current redfish exports power readings for following chassis:
      # - Chassis_1
      # - Chassis_2
      #
      # Please choose an appropriate chassis that reports the power usage of host alone (excluding GPUs)
      # and replace it in "<CHASSIS_NAME>" field.
      #
      # If selected Chassis INCLUDES GPU power consumption, replace
      # expr for instance:ceems_redfish_current_watts:pue with following:
      # 1.000000 * (label_replace(ceems_redfish_current_watts{job="cpu-redfish-nvidia-gpu",chassis"<CHASSIS_NAME>"},  "instancehost", "$1", "instance", "([^:]+):\\d+") - on (instancehost) group_left () sum by (instancehost) (label_replace(DCGM_FI_DEV_POWER_USAGE{job="nvidia-gpu"} / 1,  "instancehost", "$1", "instance", "([^:]+):\\d+"))) > 0
      - record: instance:ceems_redfish_current_watts:pue
        expr: 1 * ceems_redfish_current_watts{job="cpu-redfish-nvidia-gpu",chassis="<CHASSIS_NAME>"}

      # Total power (Watts) consumed by the compute unit including PUE value.
      #
      # Firstly, we make an assumption that 90% of power is consumed by CPU, DRAM and 10% by other
      # peripherals like network, storage, etc.
      #
      # We leverage RAPL package and DRAM to split the rest of 90% power between CPU and DRAM
      # components, when available. When RAPL counters are not available, we assume all 90% power 
      # is consumed by CPU.
      #
      # At node level, power consumed by CPU and DRAM can be estimated as
      #
      # Total CPU Power = 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) 
      # Total CPU DRAM Power = 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM))
      #
      # Now we have power usage at node level for CPU and DRAM. We split it further at the
      # compute unit level using CPU time and DRAM usage by the compute unit. For rest of
      # of the power usage like network, storage, we split it equally among all compute units 
      # that running on the node at a given time.
      #
      # Compute Unit CPU Power = Total CPU Power * (Compute CPU Time / Total CPU Time)
      # Compute Unit CPU Memory Power = Total CPU DRAM Power * (Compute Unit Memory / Total Memory)
      # Misc Power Usage by Compute Unit = 0.1 * Total Power / Number of Compute Units
      #
      # Total Compute Unit Power = Compute Unit CPU Power + Compute Unit CPU Memory Power + Misc Power Usage by Compute Unit
      #
      - record: uuid:ceems_compute_unit_cpu_power_watts:pue
        expr: |2
            0.9 * instance:ceems_redfish_current_watts:pue{job="cpu-redfish-nvidia-gpu"} # Assumption 90% Power usage by CPU, CPU memory and other peripherals.
                * on (instance) group_left () # 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) -> Total CPU Power
                  (
                      sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-redfish-nvidia-gpu"}[2s]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-redfish-nvidia-gpu"}[2s]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-redfish-nvidia-gpu"}[2s]))
                      )
                  )
              * on (instance) group_right () # Total CPU Power * (Compute CPU Time / Total CPU Time) -> Compute Unit CPU Power
                (
                    (
                        irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-redfish-nvidia-gpu"}[2s])
                      +
                        irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-redfish-nvidia-gpu"}[2s])
                    )
                  / on (instance) group_left ()
                    sum by (instance) (irate(ceems_cpu_seconds_total{job="cpu-redfish-nvidia-gpu",mode!~"idle|iowait|steal"}[2s]))
                )
            +
                  0.9 * instance:ceems_redfish_current_watts:pue{job="cpu-redfish-nvidia-gpu"}
                * on (instance) group_left () # 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM)) -> Total CPU Memory Power
                  (
                      sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-redfish-nvidia-gpu"}[2s]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-redfish-nvidia-gpu"}[2s]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-redfish-nvidia-gpu"}[2s]))
                      )
                  )
              * on (instance) group_right () # Total CPU Memory Power * (Compute Unit Memory / Total Memory) -> Compute Unit CPU Memory Power
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-redfish-nvidia-gpu"}
                  / on (instance) group_left ()
                    (
                        ceems_meminfo_MemTotal_bytes{job="cpu-redfish-nvidia-gpu"}
                      - on (instance)
                        ceems_meminfo_MemAvailable_bytes{job="cpu-redfish-nvidia-gpu"}
                    )
                )
            +
                0.1 * instance:ceems_redfish_current_watts:pue{job="cpu-redfish-nvidia-gpu"} # Total Misc Power Usage
              * on (instance) group_right () # Total Misc Power usage / Number of Compute Units -> Misc Power Usage by Compute Unit
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-redfish-nvidia-gpu"}
                  /
                    (
                        ceems_compute_unit_memory_used_bytes{job="cpu-redfish-nvidia-gpu"}
                      * on (instance) group_left ()
                        ceems_compute_units{job="cpu-redfish-nvidia-gpu"}
                    ) > 0
                )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_cpu_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_compute_unit_cpu_power_watts:pue{job="cpu-redfish-nvidia-gpu"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"}  

cpu-ipmi-nvidia-gpu.rules
---
# Recording rules for scrape job cpu-ipmi-nvidia-gpu
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
groups:
  - name: compute-unit-rules-cpu-ipmi-nvidia-gpu
    interval: 1s
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_compute_unit_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-ipmi-nvidia-gpu"}[2s])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-ipmi-nvidia-gpu"}[2s])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="cpu-ipmi-nvidia-gpu"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_compute_unit_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="cpu-ipmi-nvidia-gpu"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="cpu-ipmi-nvidia-gpu"} > 0)

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      #
      - record: instance:ceems_ipmi_dcmi_current_watts:pue
        expr: 1 * (label_replace(ceems_ipmi_dcmi_current_watts{job="cpu-ipmi-nvidia-gpu"}, "instancehost", "$1", "instance", "([^:]+):\\d+") - on (instancehost) group_left () sum by (instancehost) (label_replace(DCGM_FI_DEV_POWER_USAGE{job="ipmi-nvidia-gpu"} / 1,  "instancehost", "$1", "instance", "([^:]+):\\d+"))) > 0

      # Total power (Watts) consumed by the compute unit including PUE value.
      #
      # Firstly, we make an assumption that 90% of power is consumed by CPU, DRAM and 10% by other
      # peripherals like network, storage, etc.
      #
      # We leverage RAPL package and DRAM to split the rest of 90% power between CPU and DRAM
      # components, when available. When RAPL counters are not available, we assume all 90% power 
      # is consumed by CPU.
      #
      # At node level, power consumed by CPU and DRAM can be estimated as
      #
      # Total CPU Power = 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) 
      # Total CPU DRAM Power = 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM))
      #
      # Now we have power usage at node level for CPU and DRAM. We split it further at the
      # compute unit level using CPU time and DRAM usage by the compute unit. For rest of
      # of the power usage like network, storage, we split it equally among all compute units 
      # that running on the node at a given time.
      #
      # Compute Unit CPU Power = Total CPU Power * (Compute CPU Time / Total CPU Time)
      # Compute Unit CPU Memory Power = Total CPU DRAM Power * (Compute Unit Memory / Total Memory)
      # Misc Power Usage by Compute Unit = 0.1 * Total Power / Number of Compute Units
      #
      # Total Compute Unit Power = Compute Unit CPU Power + Compute Unit CPU Memory Power + Misc Power Usage by Compute Unit
      #
      - record: uuid:ceems_compute_unit_cpu_power_watts:pue
        expr: |2
            0.9 * instance:ceems_ipmi_dcmi_current_watts:pue{job="cpu-ipmi-nvidia-gpu"} # Assumption 90% Power usage by CPU, CPU memory and other peripherals.
              * on (instance) group_right () # Total CPU Power * (Compute CPU Time / Total CPU Time) -> Compute Unit CPU Power
                (
                    (
                        irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-ipmi-nvidia-gpu"}[2s])
                      +
                        irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-ipmi-nvidia-gpu"}[2s])
                    )
                  / on (instance) group_left ()
                    sum by (instance) (irate(ceems_cpu_seconds_total{job="cpu-ipmi-nvidia-gpu",mode!~"idle|iowait|steal"}[2s]))
                )
            +
                0.1 * instance:ceems_ipmi_dcmi_current_watts:pue{job="cpu-ipmi-nvidia-gpu"} # Total Misc Power Usage
              * on (instance) group_right () # Total Misc Power usage / Number of Compute Units -> Misc Power Usage by Compute Unit
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-ipmi-nvidia-gpu"}
                  /
                    (
                        ceems_compute_unit_memory_used_bytes{job="cpu-ipmi-nvidia-gpu"}
                      * on (instance) group_left ()
                        ceems_compute_units{job="cpu-ipmi-nvidia-gpu"}
                    ) > 0
                )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_cpu_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_compute_unit_cpu_power_watts:pue{job="cpu-ipmi-nvidia-gpu"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"}  

cpu-cray-amd-gpu.rules
---
# Recording rules for scrape job cpu-cray-amd-gpu
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
groups:
  - name: compute-unit-rules-cpu-cray-amd-gpu
    interval: 1s
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_compute_unit_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-cray-amd-gpu"}[2s])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-cray-amd-gpu"}[2s])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="cpu-cray-amd-gpu"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_compute_unit_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="cpu-cray-amd-gpu"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="cpu-cray-amd-gpu"} > 0)

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      - record: instance:ceems_cray_pm_counters_power_watts:pue
        expr: 1 * ceems_cray_pm_counters_power_watts{job="cpu-cray-amd-gpu"}

      # Total power (Watts) consumed by the compute unit including PUE value.
      #
      # Cray PM counters provide power consumption by CPU, memory and entire node.
      # This power consumption by the CPU and memory are split among all the running compute units
      # based on CPU time and memory used by the compute unit.
      #
      # Compute Unit CPU Power = Total CPU Power * (Compute Unit CPU Time / Total Node CPU Time)
      # Compute Unit Memory Power = Total Memory Power * (Compute Unit Memory Usage / Total Node Memory Usage)
      # Compute Unit Misc Power = (Total Node Power - (Total CPU Power + Total Memory Power)) / Number of Compute Units
      #
      # Misc power is the power consumption by all other peripherals on the compute host like NIC, disks, PCIe, etc.
      # This misc power is split equally among all running compute units at a given time.
      #
      - record: uuid:ceems_compute_unit_cpu_power_watts:pue
        expr: |2
            instance:ceems_cray_pm_counters_power_watts:pue{domain="cpu",job="cpu-cray-amd-gpu"} # CPU Power Usage by Compute Unit
                * on (instance) group_right ()
                  (
                      (
                          irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-cray-amd-gpu"}[2s])
                        +
                          irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-cray-amd-gpu"}[2s])
                      )
                    / on (instance) group_left ()
                      sum by (instance) (irate(ceems_cpu_seconds_total{job="cpu-cray-amd-gpu",mode!~"idle|iowait|steal"}[2s]))
                  )
              +
                  instance:ceems_cray_pm_counters_power_watts:pue{domain="memory",job="cpu-cray-amd-gpu"} # CPU Memory Power Usage by Compute Unit
                * on (instance) group_right ()
                  (
                      ceems_compute_unit_memory_used_bytes{job="cpu-cray-amd-gpu"}
                    / on (instance) group_left ()
                      (
                          ceems_meminfo_MemTotal_bytes{job="cpu-cray-amd-gpu"}
                        - on (instance)
                          ceems_meminfo_MemAvailable_bytes{job="cpu-cray-amd-gpu"}
                      )
                  )
            +
                (
                    instance:ceems_cray_pm_counters_power_watts:pue{domain="node",job="cpu-cray-amd-gpu"} # Misc Power Usage by Compute Unit   
                  - on (instance)
                    sum by (instance) (instance:ceems_cray_pm_counters_power_watts:pue{domain!~"node",job="cpu-cray-amd-gpu"})
                )
              * on (instance) group_right ()
                (
                      ceems_compute_unit_memory_used_bytes{job="cpu-cray-amd-gpu"}
                    /
                      (
                          ceems_compute_unit_memory_used_bytes{job="cpu-cray-amd-gpu"}
                        * on (instance) group_left ()
                          ceems_compute_units{job="cpu-cray-amd-gpu"}
                      )
                  >
                    0
                )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_cpu_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_compute_unit_cpu_power_watts:pue{job="cpu-cray-amd-gpu"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"} 

cpu-only-rapl.rules
---
# Recording rules for scrape job cpu-only-rapl
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
groups:
  - name: compute-unit-rules-cpu-only-rapl
    interval: 1s
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_compute_unit_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-only-rapl"}[2s])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-only-rapl"}[2s])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="cpu-only-rapl"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_compute_unit_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="cpu-only-rapl"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="cpu-only-rapl"} > 0)

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      - record: instance:ceems_rapl_package_joules_total:pue
        expr: 1 * ceems_rapl_package_joules_total{job="cpu-only-rapl"}

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      - record: instance:ceems_rapl_dram_joules_total:pue
        expr: 1 * ceems_rapl_dram_joules_total{job="cpu-only-rapl"}

      # Unit's CPU total energy usage estimated from IPMI DCMI
      - record: uuid:ceems_compute_unit_cpu_power_watts:pue
        expr: |2
          (
                  sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-rapl"}[2s]))
                /
                  (
                      sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-rapl"}[2s]))
                    +
                      (
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-rapl"}[2s]))
                        or
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-rapl"}[2s])) * 0
                      )
                  )
              )
            * on (instance) group_right ()
              (
                  (
                      irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-only-rapl"}[2s])
                    +
                      irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-only-rapl"}[2s])
                  )
                / on (instance) group_left ()
                  sum by (instance) (irate(ceems_cpu_seconds_total{job="cpu-only-rapl",mode!~"idle|iowait|steal"}[2s]))
              )
          +
              (
                  (
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-rapl"}[2s]))
                        or
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-rapl"}[2s])) * 0
                      )
                /
                  (
                      sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-rapl"}[2s]))
                    +
                      (
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-rapl"}[2s]))
                        or
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-rapl"}[2s])) * 0
                      )
                  )
              )
            * on (instance) group_right ()
              (
                  ceems_compute_unit_memory_used_bytes{job="cpu-only-rapl"}
                / on (instance) group_left ()
                  (
                      ceems_meminfo_MemTotal_bytes{job="cpu-only-rapl"}
                    - on (instance)
                      ceems_meminfo_MemAvailable_bytes{job="cpu-only-rapl"}
                  )
              )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_cpu_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_compute_unit_cpu_power_watts:pue{job="cpu-only-rapl"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"} 

cpu-only-redfish.rules
---
# Recording rules for scrape job cpu-only-redfish
#
# The following recording rules provide several CPU related metrics of the individual
# compute units. Each of these metrics involving multiple raw metrics to compute them.
# Performing such queries involving multiple metrics is a computational intensive
# operation for Prometheus and hence, we leverage recording rules to estimate them
# in the real time and store them in the TSDB. The downside of this approach is that
# it creates new metrics which consume more space. However, we add atmost 10 new metrics
# which should not increase the disk use of TSDB enormously.
#
groups:
  - name: compute-unit-rules-cpu-only-redfish
    interval: 1s
    rules:
      # CPU usage (%) of compute unit. It is percentage of CPU cycles spent by the compute unit.
      - record: uuid:ceems_compute_unit_cpu_usage:ratio_irate
        expr: |2
          (
              irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-only-redfish"}[2s])
            +
              irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-only-redfish"}[2s])
          ) * 100
          /
            (ceems_compute_unit_cpus{job="cpu-only-redfish"} > 0)

      # CPU memory usage (%) of compute unit. It is percentage of CPU memory used by compute unit relative to
      # the available memory to the compute unit.
      - record: uuid:ceems_compute_unit_cpu_memory_usage:ratio
        expr: |2
          ceems_compute_unit_memory_used_bytes{job="cpu-only-redfish"} * 100
          /
          (ceems_compute_unit_memory_total_bytes{job="cpu-only-redfish"} > 0)

      # Total power (Watts) consumed by the instance by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      #
      - record: instance:ceems_redfish_current_watts:pue
        expr: 1 * ceems_redfish_current_watts{job="cpu-only-redfish",chassis="Chassis_1"}

      # Total power (Watts) consumed by the compute unit including PUE value.
      #
      # Firstly, we make an assumption that 90% of power is consumed by CPU, DRAM and 10% by other
      # peripherals like network, storage, etc.
      #
      # We leverage RAPL package and DRAM to split the rest of 90% power between CPU and DRAM
      # components, when available. When RAPL counters are not available, we assume all 90% power 
      # is consumed by CPU.
      #
      # At node level, power consumed by CPU and DRAM can be estimated as
      #
      # Total CPU Power = 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) 
      # Total CPU DRAM Power = 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM))
      #
      # Now we have power usage at node level for CPU and DRAM. We split it further at the
      # compute unit level using CPU time and DRAM usage by the compute unit. For rest of
      # of the power usage like network, storage, we split it equally among all compute units 
      # that running on the node at a given time.
      #
      # Compute Unit CPU Power = Total CPU Power * (Compute CPU Time / Total CPU Time)
      # Compute Unit CPU Memory Power = Total CPU DRAM Power * (Compute Unit Memory / Total Memory)
      # Misc Power Usage by Compute Unit = 0.1 * Total Power / Number of Compute Units
      #
      # Total Compute Unit Power = Compute Unit CPU Power + Compute Unit CPU Memory Power + Misc Power Usage by Compute Unit
      #
      - record: uuid:ceems_compute_unit_cpu_power_watts:pue
        expr: |2
            0.9 * instance:ceems_redfish_current_watts:pue{job="cpu-only-redfish"} # Assumption 90% Power usage by CPU, CPU memory and other peripherals.
                * on (instance) group_left () # 0.9 * Total Power * (RAPL Package / (RAPL Package + RAPL DRAM)) -> Total CPU Power
                  (
                      sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-redfish"}[2s]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-redfish"}[2s]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-redfish"}[2s]))
                      )
                  )
              * on (instance) group_right () # Total CPU Power * (Compute CPU Time / Total CPU Time) -> Compute Unit CPU Power
                (
                    (
                        irate(ceems_compute_unit_cpu_user_seconds_total{job="cpu-only-redfish"}[2s])
                      +
                        irate(ceems_compute_unit_cpu_system_seconds_total{job="cpu-only-redfish"}[2s])
                    )
                  / on (instance) group_left ()
                    sum by (instance) (irate(ceems_cpu_seconds_total{job="cpu-only-redfish",mode!~"idle|iowait|steal"}[2s]))
                )
            +
                  0.9 * instance:ceems_redfish_current_watts:pue{job="cpu-only-redfish"}
                * on (instance) group_left () # 0.9 * Total Power * (RAPL DRAM / (RAPL Package + RAPL DRAM)) -> Total CPU Memory Power
                  (
                      sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-redfish"}[2s]))
                    /
                      (
                          sum by (instance) (irate(ceems_rapl_package_joules_total{job="cpu-only-redfish"}[2s]))
                        +
                          sum by (instance) (irate(ceems_rapl_dram_joules_total{job="cpu-only-redfish"}[2s]))
                      )
                  )
              * on (instance) group_right () # Total CPU Memory Power * (Compute Unit Memory / Total Memory) -> Compute Unit CPU Memory Power
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-only-redfish"}
                  / on (instance) group_left ()
                    (
                        ceems_meminfo_MemTotal_bytes{job="cpu-only-redfish"}
                      - on (instance)
                        ceems_meminfo_MemAvailable_bytes{job="cpu-only-redfish"}
                    )
                )
            +
                0.1 * instance:ceems_redfish_current_watts:pue{job="cpu-only-redfish"} # Total Misc Power Usage
              * on (instance) group_right () # Total Misc Power usage / Number of Compute Units -> Misc Power Usage by Compute Unit
                (
                    ceems_compute_unit_memory_used_bytes{job="cpu-only-redfish"}
                  /
                    (
                        ceems_compute_unit_memory_used_bytes{job="cpu-only-redfish"}
                      * on (instance) group_left ()
                        ceems_compute_units{job="cpu-only-redfish"}
                    ) > 0
                )

      # Total equivalent emissions rate (g/s) due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_cpu_emissions_g_s:pue
        expr: |2
          label_replace(
              uuid:ceems_compute_unit_cpu_power_watts:pue{job="cpu-only-redfish"} / 3.6e+06,
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"}  

ipmi-nvidia-gpu.rules
---
# Recording rules for NVIDIA GPUs in cpu-ipmi-nvidia-gpu
#
# We leverage these rules to include PUE (Power Usage Effectiveness) in the Power
# estimation as well.
#
groups:
  - name: compute-unit-gpu-rules-cpu-ipmi-nvidia-gpu
    rules:
      # GPU Usage (%) by compute unit
      - record: uuid:ceems_compute_unit_gpu_usage:ratio
        expr: |2
            DCGM_FI_DEV_GPU_UTIL{job="ipmi-nvidia-gpu"}
            * on (gpuuuid) group_right ()
            ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"}

      # GPU Memory Usage (%) by compute unit
      - record: uuid:ceems_compute_unit_gpu_memory_usage:ratio
        expr: |2
          (
              DCGM_FI_DEV_FB_USED{job="ipmi-nvidia-gpu"} * 100
            /
              (DCGM_FI_DEV_FB_USED{job="ipmi-nvidia-gpu"} + DCGM_FI_DEV_FB_FREE{job="ipmi-nvidia-gpu"})
          )
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"}
      
      # Total power (Watts) consumed by the GPU by including Power Usage Effectiveness (PUE) value.
      # By default, a PUE of 1 is used.
      - record: dev:DCGM_FI_DEV_POWER_USAGE:pue
        expr: 1 * DCGM_FI_DEV_POWER_USAGE{job="ipmi-nvidia-gpu"}

      - record: uuid:ceems_compute_unit_gpu_power_watts:pue
        expr: |2
          dev:DCGM_FI_DEV_POWER_USAGE:pue{job="ipmi-nvidia-gpu"}
          * on (gpuuuid) group_right()
          ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"}

      # Total equivalent emissions rate (g/s) from GPU due to the power consumed by the compute unit.
      # The equivalent emissions are estimated using emission factor from owid for country
      # FR
      - record: uuid:ceems_compute_unit_gpu_emissions_g_s:pue
        expr: |2
          label_replace(
              dev:DCGM_FI_DEV_POWER_USAGE:pue{job="ipmi-nvidia-gpu"} / 3.6e+06
            * on (gpuuuid) group_right ()
              ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"},
              "provider",
              "owid",
              "instance",
              "(.*)"
            )
          * on (provider) group_left ()
            label_replace(
              ceems_emissions_gCo2_kWh{country_code="FR",provider="owid"},
              "common_label",
              "mock",
              "instance",
              "(.*)"
            ) 

      # Profiling metrics

      - record: uuid:ceems_compute_unit_gpu_sm_active:ratio
        expr: |2
          DCGM_FI_PROF_SM_ACTIVE{job="ipmi-nvidia-gpu"} * 100
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"}

      - record: uuid:ceems_compute_unit_gpu_sm_occupancy:ratio
        expr: |2
          DCGM_FI_PROF_SM_OCCUPANCY{job="ipmi-nvidia-gpu"} * 100
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"}

      - record: uuid:ceems_compute_unit_gpu_gr_engine_active:ratio
        expr: |2
          DCGM_FI_PROF_GR_ENGINE_ACTIVE{job="ipmi-nvidia-gpu"} * 100
          * on (gpuuuid) group_right ()
          ceems_compute_unit_gpu_index_flag{job="cpu-ipmi-nvidia-gpu"}

Queries for TSDB updater:
---

queries:
  avg_cpu_mem_usage:
    global: avg_over_time(avg by (uuid) (uuid:ceems_compute_unit_cpu_memory_usage:ratio{uuid=~"{{.UUIDs}}"} > 0 < inf)[{{.Range}}:])


  avg_cpu_usage:
    global: avg_over_time(avg by (uuid) (uuid:ceems_compute_unit_cpu_usage:ratio_irate{uuid=~"{{.UUIDs}}"} > 0 < inf)[{{.Range}}:])


  avg_gpu_mem_usage:


  avg_gpu_usage:


  total_cpu_emissions_gms:




  total_cpu_energy_usage_kwh:


  total_gpu_emissions_gms:




  total_gpu_energy_usage_kwh:



