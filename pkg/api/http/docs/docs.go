// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Mahendra Paipuri",
            "url": "https://github.com/mahendrapaipuri/ceems/issues",
            "email": "mahendra.paipuri@gmail.com"
        },
        "license": {
            "name": "BSD-3-Clause license",
            "url": "https://opensource.org/license/bsd-3-clause"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/clusters/admin": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This endpoint will list all the cluster IDs in the CEEMS DB. The\ncurrent user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nThis will list all the cluster IDs in the DB. This is primarily\nused to verify the CEEMS load balancer's backend IDs that should match\nwith cluster IDs.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clusters"
                ],
                "summary": "List clusters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Cluster"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "This endpoint returns the health status of the server.\n\nA healthy server returns 200 response code and any other\nresponses should be treated as unhealthy server.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This endpoint will list all the active projects of the current user. The\ncurrent user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nThis will list all the projects that the user has ever been a part of\nalthough if the user loses the membership after.\n\nThis needs to be improved as it has potential security implications.\nCheck the [issue 91](https://github.com/mahendrapaipuri/ceems/issues/91)\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Project"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/units": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This user endpoint will fetch compute units of the current user. The\ncurrent user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nIf multiple query parameters are passed, for instance, ` + "`" + `?uuid=\u003cuuid\u003e\u0026project=\u003cproject\u003e` + "`" + `,\nthe intersection of query parameters are used to fetch compute units rather than\nthe union. That means if the compute unit's ` + "`" + `uuid` + "`" + ` does not belong to the queried\nproject, null response will be returned.\n\nIn order to return the running compute units as well, use the query parameter ` + "`" + `running` + "`" + `.\n\nIf ` + "`" + `to` + "`" + ` query parameter is not provided, current time will be used. If ` + "`" + `from` + "`" + `\nquery parameter is not used, a default query window of 24 hours will be used.\nIt means if ` + "`" + `to` + "`" + ` is provided, ` + "`" + `from` + "`" + ` will be calculated as ` + "`" + `to` + "`" + ` - 24hrs.\n\nTo limit the number of fields in the response, use ` + "`" + `field` + "`" + ` query parameter. By default, all\nfields will be included in the response if they are _non-empty_.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "units"
                ],
                "summary": "User endpoint for fetching compute units",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Unit UUID",
                        "name": "uuid",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to fetch running units",
                        "name": "running",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Fields to return in response",
                        "name": "field",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Unit"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/units/admin": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This admin endpoint will fetch compute units of _any_ user, compute unit and/or project. The\ncurrent user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nThe user who is making the request must be in the list of admin users\nconfigured for the server.\n\nIf multiple query parameters are passed, for instance, ` + "`" + `?uuid=\u003cuuid\u003e\u0026user=\u003cuser\u003e` + "`" + `,\nthe intersection of query parameters are used to fetch compute units rather than\nthe union. That means if the compute unit's ` + "`" + `uuid` + "`" + ` does not belong to the queried\nuser, null response will be returned.\n\nIn order to return the running compute units as well, use the query parameter ` + "`" + `running` + "`" + `.\n\nIf ` + "`" + `to` + "`" + ` query parameter is not provided, current time will be used. If ` + "`" + `from` + "`" + `\nquery parameter is not used, a default query window of 24 hours will be used.\nIt means if ` + "`" + `to` + "`" + ` is provided, ` + "`" + `from` + "`" + ` will be calculated as ` + "`" + `to` + "`" + ` - 24hrs.\n\nTo limit the number of fields in the response, use ` + "`" + `field` + "`" + ` query parameter. By default, all\nfields will be included in the response if they are _non-empty_.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "units"
                ],
                "summary": "Admin endpoint for fetching compute units.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Unit UUID",
                        "name": "uuid",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "User name",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to fetch running units",
                        "name": "running",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Fields to return in response",
                        "name": "field",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Unit"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/units/verify": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This endpoint will check if the current user is the owner of the\nqueried UUIDs. The current user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nA response of 200 means that the current user is the owner of the queried UUIDs.\nAny other response code should be treated as the current user not being the owner\nof the queried units.\n\nThe ownership check passes if any of the following conditions are ` + "`" + `true` + "`" + `:\n- If the current user is the _direct_ owner of the compute unit.\n- If the current user belongs to the same account/project/namespace as\nthe compute unit. This means the users belonging to the same project can\naccess each others compute units.\n\nThe above checks must pass for **all** the queried units.\nIf the check does not pass for at least one queried unit, a response 403 will be\nreturned.\n\nAny 500 response codes should be treated as failed check as well.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "units"
                ],
                "summary": "Verify unit ownership",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Unit UUID",
                        "name": "uuid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Ownership"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/usage/{mode}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This endpoint will return the usage statistics current user. The\ncurrent user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nA path parameter ` + "`" + `mode` + "`" + ` is required to return the kind of usage statistics.\nCurrently, two modes of statistics are supported:\n- ` + "`" + `current` + "`" + `: In this mode the usage between two time periods is returned\nbased on ` + "`" + `from` + "`" + ` and ` + "`" + `to` + "`" + ` query parameters.\n- ` + "`" + `global` + "`" + `: In this mode the _total_ usage statistics are returned. For\ninstance, if the retention period of the DB is set to 2 years, usage\nstatistics of last 2 years will be returned.\n\nThe statistics can be limited to certain projects by passing ` + "`" + `project` + "`" + ` query,\nparameter.\n\nIf ` + "`" + `to` + "`" + ` query parameter is not provided, current time will be used. If ` + "`" + `from` + "`" + `\nquery parameter is not used, a default query window of 24 hours will be used.\nIt means if ` + "`" + `to` + "`" + ` is provided, ` + "`" + `from` + "`" + ` will be calculated as ` + "`" + `to` + "`" + ` - 24hrs.\n\nTo limit the number of fields in the response, use ` + "`" + `field` + "`" + ` query parameter. By default, all\nfields will be included in the response if they are _non-empty_.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Usage statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "enum": [
                            "current",
                            "global"
                        ],
                        "type": "string",
                        "description": "Whether to get usage stats within a period or global",
                        "name": "mode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Fields to return in response",
                        "name": "field",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Usage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/usage/{mode}/admin": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This admin endpoint will return the usage statistics of _queried_ user. The\ncurrent user is always identified by the header ` + "`" + `X-Grafana-User` + "`" + ` in\nthe request.\n\nThe user who is making the request must be in the list of admin users\nconfigured for the server.\n\nA path parameter ` + "`" + `mode` + "`" + ` is required to return the kind of usage statistics.\nCurrently, two modes of statistics are supported:\n- ` + "`" + `current` + "`" + `: In this mode the usage between two time periods is returned\nbased on ` + "`" + `from` + "`" + ` and ` + "`" + `to` + "`" + ` query parameters.\n- ` + "`" + `global` + "`" + `: In this mode the _total_ usage statistics are returned. For\ninstance, if the retention period of the DB is set to 2 years, usage\nstatistics of last 2 years will be returned.\n\nThe statistics can be limited to certain projects by passing ` + "`" + `project` + "`" + ` query,\nparameter.\n\nIf ` + "`" + `to` + "`" + ` query parameter is not provided, current time will be used. If ` + "`" + `from` + "`" + `\nquery parameter is not used, a default query window of 24 hours will be used.\nIt means if ` + "`" + `to` + "`" + ` is provided, ` + "`" + `from` + "`" + ` will be calculated as ` + "`" + `to` + "`" + ` - 24hrs.\n\nTo limit the number of fields in the response, use ` + "`" + `field` + "`" + ` query parameter. By default, all\nfields will be included in the response if they are _non-empty_.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usage"
                ],
                "summary": "Admin Usage statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current user name",
                        "name": "X-Grafana-User",
                        "in": "header",
                        "required": true
                    },
                    {
                        "enum": [
                            "current",
                            "global"
                        ],
                        "type": "string",
                        "description": "Whether to get usage stats within a period or global",
                        "name": "mode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From timestamp",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To timestamp",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Fields to return in response",
                        "name": "field",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Usage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        },
        "/{resource}/demo": {
            "get": {
                "description": "This endpoint returns sample response for units and usage models. This\nendpoint do not require the setting of ` + "`" + `X-Grafana-User` + "`" + ` header as it\nonly returns mock data for each request. This can be used to introspect\nthe response models for different resources.\n\nThe endpoint requires a path parameter ` + "`" + `resource` + "`" + ` which takes either:\n- ` + "`" + `units` + "`" + ` which returns a mock units response\n- ` + "`" + `usage` + "`" + ` which returns a mock usage response.\n\nThe mock data is generated randomly for each request and there is\nno guarantee that the data has logical sense.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "demo"
                ],
                "summary": "Demo Units/Usage endpoints",
                "parameters": [
                    {
                        "enum": [
                            "units",
                            "usage"
                        ],
                        "type": "string",
                        "description": "Whether to return mock units or usage data",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response-models_Usage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response-any"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.Response-any": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {}
                },
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "$ref": "#/definitions/http.errorType"
                },
                "status": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.Response-models_Cluster": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Cluster"
                    }
                },
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "$ref": "#/definitions/http.errorType"
                },
                "status": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.Response-models_Ownership": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Ownership"
                    }
                },
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "$ref": "#/definitions/http.errorType"
                },
                "status": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.Response-models_Project": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Project"
                    }
                },
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "$ref": "#/definitions/http.errorType"
                },
                "status": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.Response-models_Unit": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Unit"
                    }
                },
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "$ref": "#/definitions/http.errorType"
                },
                "status": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.Response-models_Usage": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Usage"
                    }
                },
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "$ref": "#/definitions/http.errorType"
                },
                "status": {
                    "type": "string"
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.errorType": {
            "type": "string",
            "enum": [
                "",
                "unauthorized",
                "forbidden",
                "timeout",
                "canceled",
                "execution",
                "bad_data",
                "internal",
                "unavailable",
                "not_found",
                "not_acceptable"
            ],
            "x-enum-varnames": [
                "errorNone",
                "errorUnauthorized",
                "errorForbidden",
                "errorTimeout",
                "errorCanceled",
                "errorExec",
                "errorBadData",
                "errorInternal",
                "errorUnavailable",
                "errorNotFound",
                "errorNotAcceptable"
            ]
        },
        "models.Allocation": {
            "type": "object",
            "additionalProperties": true
        },
        "models.Cluster": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "manager": {
                    "type": "string"
                }
            }
        },
        "models.Ownership": {
            "type": "object",
            "properties": {
                "owner": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string"
                },
                "uuids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Tag": {
            "type": "object",
            "additionalProperties": true
        },
        "models.Unit": {
            "type": "object",
            "properties": {
                "allocation": {
                    "description": "Allocation map of unit. Only string and int64 values are supported in map",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Allocation"
                        }
                    ]
                },
                "avg_cpu_mem_usage": {
                    "description": "Average CPU memory during lifetime of unit",
                    "type": "number"
                },
                "avg_cpu_usage": {
                    "description": "Average CPU usage during lifetime of unit",
                    "type": "number"
                },
                "avg_gpu_mem_usage": {
                    "description": "Average GPU memory during lifetime of unit",
                    "type": "number"
                },
                "avg_gpu_usage": {
                    "description": "Average GPU usage during lifetime of unit",
                    "type": "number"
                },
                "cluster_id": {
                    "description": "Identifier of the resource manager that owns compute unit. It is used to differentiate multiple clusters of same resource manager.",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "created_at_ts": {
                    "description": "Creation timestamp",
                    "type": "integer"
                },
                "elapsed": {
                    "description": "Human readable total elapsed time string",
                    "type": "string"
                },
                "ended_at": {
                    "description": "End time",
                    "type": "string"
                },
                "ended_at_ts": {
                    "description": "End timestamp",
                    "type": "integer"
                },
                "grp": {
                    "description": "User group",
                    "type": "string"
                },
                "name": {
                    "description": "Name of compute unit",
                    "type": "string"
                },
                "project": {
                    "description": "Account in batch systems, Tenant in Openstack, Namespace in k8s",
                    "type": "string"
                },
                "resource_manager": {
                    "description": "Name of the resource manager that owns compute unit. Eg slurm, openstack, kubernetes, etc",
                    "type": "string"
                },
                "started_at": {
                    "description": "Start time",
                    "type": "string"
                },
                "started_at_ts": {
                    "description": "Start timestamp",
                    "type": "integer"
                },
                "state": {
                    "description": "Current state of unit",
                    "type": "string"
                },
                "tags": {
                    "description": "A map to store generic info. String and int64 are valid value types of map",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Tag"
                        }
                    ]
                },
                "total_cpu_emissions_gms": {
                    "description": "Total CPU emissions in grams during lifetime of unit",
                    "type": "number"
                },
                "total_cpu_energy_usage_kwh": {
                    "description": "Total CPU energy usage in kWh during lifetime of unit",
                    "type": "number"
                },
                "total_cputime_seconds": {
                    "description": "Total number of CPU seconds consumed by the unit",
                    "type": "integer"
                },
                "total_gpu_emissions_gms": {
                    "description": "Total GPU emissions in grams during lifetime of unit",
                    "type": "number"
                },
                "total_gpu_energy_usage_kwh": {
                    "description": "Total GPU energy usage in kWh during lifetime of unit",
                    "type": "number"
                },
                "total_gputime_seconds": {
                    "description": "Total number of GPU seconds consumed by the unit",
                    "type": "integer"
                },
                "total_ingress_in_gb": {
                    "description": "Total ingress traffic in GB of unit",
                    "type": "number"
                },
                "total_io_read_cold_gb": {
                    "description": "Total IO read on cold storage in GB during lifetime of unit",
                    "type": "number"
                },
                "total_io_read_hot_gb": {
                    "description": "Total IO read on hot storage in GB during lifetime of unit",
                    "type": "number"
                },
                "total_io_write_cold_gb": {
                    "description": "Total IO write on cold storage in GB during lifetime of unit",
                    "type": "number"
                },
                "total_io_write_hot_gb": {
                    "description": "Total IO write on hot storage in GB during lifetime of unit",
                    "type": "number"
                },
                "total_outgress_in_gb": {
                    "description": "Total outgress traffic in GB of unit",
                    "type": "number"
                },
                "total_walltime_seconds": {
                    "description": "Total elapsed wall time in seconds",
                    "type": "integer"
                },
                "usr": {
                    "description": "Username",
                    "type": "string"
                },
                "uuid": {
                    "description": "Unique identifier of unit. It can be Job ID for batch jobs, UUID for pods in k8s or VMs in Openstack",
                    "type": "string"
                }
            }
        },
        "models.Usage": {
            "type": "object",
            "properties": {
                "avg_cpu_mem_usage": {
                    "description": "Average CPU memory during lifetime of project",
                    "type": "number"
                },
                "avg_cpu_usage": {
                    "description": "Average CPU usage during lifetime of project",
                    "type": "number"
                },
                "avg_gpu_mem_usage": {
                    "description": "Average GPU memory during lifetime of project",
                    "type": "number"
                },
                "avg_gpu_usage": {
                    "description": "Average GPU usage during lifetime of project",
                    "type": "number"
                },
                "cluster_id": {
                    "description": "Identifier of the resource manager that owns compute unit. It is used to differentiate multiple clusters of same resource manager.",
                    "type": "string"
                },
                "num_units": {
                    "description": "Number of consumed units",
                    "type": "integer"
                },
                "project": {
                    "description": "Account in batch systems, Tenant in Openstack, Namespace in k8s",
                    "type": "string"
                },
                "resource_manager": {
                    "description": "Name of the resource manager that owns project. Eg slurm, openstack, kubernetes, etc",
                    "type": "string"
                },
                "total_cpu_emissions_gms": {
                    "description": "Total CPU emissions in grams during lifetime of project",
                    "type": "number"
                },
                "total_cpu_energy_usage_kwh": {
                    "description": "Total CPU energy usage in kWh during lifetime of project",
                    "type": "number"
                },
                "total_cpumemtime_seconds": {
                    "description": "Total number of CPU memory (in MB) seconds consumed by the project",
                    "type": "integer"
                },
                "total_cputime_seconds": {
                    "description": "Total number of CPU seconds consumed by the project",
                    "type": "integer"
                },
                "total_gpu_emissions_gms": {
                    "description": "Total GPU emissions in grams during lifetime of project",
                    "type": "number"
                },
                "total_gpu_energy_usage_kwh": {
                    "description": "Total GPU energy usage in kWh during lifetime of project",
                    "type": "number"
                },
                "total_gpumemtime_seconds": {
                    "description": "Total number of GPU memory (in MB) seconds consumed by the project",
                    "type": "integer"
                },
                "total_gputime_seconds": {
                    "description": "Total number of GPU seconds consumed by the project",
                    "type": "integer"
                },
                "total_ingress_in_gb": {
                    "description": "Total ingress traffic in GB of project",
                    "type": "number"
                },
                "total_io_read_cold_gb": {
                    "description": "Total IO read on cold storage in GB during lifetime of project",
                    "type": "number"
                },
                "total_io_read_hot_gb": {
                    "description": "Total IO read on hot storage in GB during lifetime of project",
                    "type": "number"
                },
                "total_io_write_cold_gb": {
                    "description": "Total IO write on cold storage in GB during lifetime of project",
                    "type": "number"
                },
                "total_io_write_hot_gb": {
                    "description": "Total IO write on hot storage in GB during lifetime of project",
                    "type": "number"
                },
                "total_outgress_in_gb": {
                    "description": "Total outgress traffic in GB of project",
                    "type": "number"
                },
                "total_walltime_seconds": {
                    "description": "Total elapsed wall time in seconds consumed by the project",
                    "type": "integer"
                },
                "usr": {
                    "description": "Username",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "url": "https://mahendrapaipuri.github.io/ceems/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "CEEMS API",
	Description:      "OpenAPI specification (OAS) for the CEEMS REST API.\n\nSee the Interactive Docs to try CEEMS API methods without writing code, and get\nthe complete schema of resources exposed by the API.\n\nIf basic auth is enabled, all the endpoints require authentication.\n\nAll the endpoints, except `health` and `demo`, must send a user-agent header.\n\nTimestamps must be specified in milliseconds, unless otherwise specified.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
