basePath: /api/v1
definitions:
  http.Response-any:
    properties:
      data:
        items: {}
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.Response-models_Cluster:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Cluster'
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.Response-models_Project:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Project'
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.Response-models_Stat:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Stat'
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.Response-models_Unit:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Unit'
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.Response-models_Usage:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Usage'
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.Response-models_User:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
        x-nullable: true
        x-omitempty: true
      error:
        type: string
        x-nullable: true
        x-omitempty: true
      errorType:
        allOf:
        - $ref: '#/definitions/http.errorType'
        x-nullable: true
        x-omitempty: true
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
        x-nullable: true
        x-omitempty: true
    type: object
  http.errorType:
    enum:
    - ""
    - unauthorized
    - forbidden
    - timeout
    - canceled
    - execution
    - bad_data
    - internal
    - unavailable
    - not_found
    - not_acceptable
    type: string
    x-enum-varnames:
    - errorNone
    - errorUnauthorized
    - errorForbidden
    - errorTimeout
    - errorCanceled
    - errorExec
    - errorBadData
    - errorInternal
    - errorUnavailable
    - errorNotFound
    - errorNotAcceptable
  models.Cluster:
    properties:
      id:
        type: string
      manager:
        type: string
    type: object
  models.Project:
    properties:
      cluster_id:
        description: Identifier of the resource manager that owns project. It is used
          to differentiate multiple clusters of same resource manager.
        example: slurm-0
        type: string
      name:
        description: Name of the project
        example: prj1
        type: string
      resource_manager:
        description: Name of the resource manager that owns project. Eg slurm, openstack,
          kubernetes, etc
        example: slurm
        type: string
      tags:
        description: List of meta data tags of the project
        example:
        - tag1
        - tag2
        items:
          type: string
        type: array
      uid:
        description: Unique identifier of the project provided by cluster
        example: "1000"
        type: string
      users:
        description: List of users of the project
        example:
        - usr1
        - usr2
        items:
          type: string
        type: array
    type: object
  models.Stat:
    properties:
      cluster_id:
        description: Identifier of the resource manager that owns compute unit. It
          is used to differentiate multiple clusters of same resource manager.
        example: slurm-0
        type: string
      num_active_units:
        description: Number of active units that are in running state
        example: 800
        type: integer
      num_inactive_units:
        description: Number of inactive units that are in terminated/cancelled/error
          state
        example: 200
        type: integer
      num_projects:
        description: Number of projects
        example: 200
        type: integer
      num_units:
        description: Number of active and terminated units
        example: 1000
        type: integer
      num_users:
        description: Number of users
        example: 500
        type: integer
      resource_manager:
        description: Name of the resource manager that owns project. Eg slurm, openstack,
          kubernetes, etc
        example: slurm
        type: string
    type: object
  models.Unit:
    properties:
      allocation:
        additionalProperties:
          type: number
        description: Allocation map of unit. Only string and int64 values are supported
          in map
        example:
          cpus: 1
          gpus: 1
          mem: 10
        type: object
      avg_cpu_mem_usage:
        additionalProperties:
          type: number
        description: Average CPU memory usage(s) during lifetime of unit
        example:
          global: 45.26
        type: object
      avg_cpu_usage:
        additionalProperties:
          type: number
        description: Average CPU usage(s) during lifetime of unit
        example:
          global: 70.12
        type: object
      avg_gpu_mem_usage:
        additionalProperties:
          type: number
        description: Average GPU memory usage(s) during lifetime of unit
        example:
          global: 45.26
        type: object
      avg_gpu_usage:
        additionalProperties:
          type: number
        description: Average GPU usage(s) during lifetime of unit
        example:
          global: 70.12
        type: object
      cluster_id:
        description: Identifier of the resource manager that owns compute unit. It
          is used to differentiate multiple clusters of same resource manager.
        example: slurm-0
        type: string
      created_at:
        description: Creation time
        example: 2023-02-21T15:48:20+0100
        type: string
      created_at_ts:
        description: Creation timestamp
        example: 1676990900000
        type: integer
      elapsed:
        description: Human readable total elapsed time string
        example: 2-00:10:20
        type: string
      ended_at:
        description: End time
        example: Unknown
        type: string
      ended_at_ts:
        description: End timestamp
        example: 0
        type: integer
      groupname:
        description: User group
        example: grp1
        type: string
      name:
        description: Name of compute unit
        example: my-slurm-job
        type: string
      project:
        description: Account in batch systems, Tenant in Openstack, Namespace in k8s
        example: prj1
        type: string
      resource_manager:
        description: Name of the resource manager that owns compute unit. Eg slurm,
          openstack, kubernetes, etc
        example: slurm
        type: string
      started_at:
        description: Start time
        example: 2023-02-21T15:49:06+0100
        type: string
      started_at_ts:
        description: Start timestamp
        example: 1676990946000
        type: integer
      state:
        description: Current state of unit
        example: RUNNING
        type: string
      tags:
        additionalProperties:
          type: string
        description: A map to store generic info. String and int64 are valid value
          types of map
        example:
          gid: "1000"
          uid: "1000"
          workdir: /home/user
        type: object
      total_cpu_emissions_gms:
        additionalProperties:
          type: number
        description: Total CPU emissions from source(s) in grams during lifetime of
          unit
        example:
          emaps_total: 3.09
          owid_total: 5.22
        type: object
      total_cpu_energy_usage_kwh:
        additionalProperties:
          type: number
        description: Total CPU energy usage(s) in kWh during lifetime of unit
        example:
          total: 0.73
        type: object
      total_egress_stats:
        additionalProperties:
          type: number
        description: Total Outgress statistics of unit
        example:
          bytes_total: 454342323
          packets_total: 23232323
        type: object
      total_gpu_emissions_gms:
        additionalProperties:
          type: number
        description: Total GPU emissions from source(s) in grams during lifetime of
          unit
        example:
          emaps_total: 12.09
          owid_total: 15.22
        type: object
      total_gpu_energy_usage_kwh:
        additionalProperties:
          type: number
        description: Total GPU energy usage(s) in kWh during lifetime of unit
        example:
          total: 5.39
        type: object
      total_ingress_stats:
        additionalProperties:
          type: number
        description: Total Ingress statistics of unit
        example:
          bytes_total: 8503405
          packets_total: 43423
        type: object
      total_io_read_stats:
        additionalProperties:
          type: number
        description: Total IO read statistics during lifetime of unit
        example:
          bytes_total: 245000000
          requests_total: 49423
        type: object
      total_io_write_stats:
        additionalProperties:
          type: number
        description: Total IO write statistics during lifetime of unit
        example:
          bytes_total: 12000000
          requests_total: 13923
        type: object
      total_time_seconds:
        additionalProperties:
          type: number
        description: Different types of times in seconds consumed by the unit. This
          map contains at minimum `walltime`, `alloc_cputime`, `alloc_cpumemtime`,
          `alloc_gputime` and `alloc_gpumem_time` keys.
        example:
          alloc_cpumemtime: 1000
          alloc_cputime: 100
          alloc_gpumemtime: 100
          alloc_gputime: 100
          walltime: 100
        type: object
      username:
        description: Username
        example: usr1
        type: string
      uuid:
        description: Unique identifier of unit. It can be Job ID for batch jobs, UUID
          for pods in k8s or VMs in Openstack
        example: "193048"
        type: string
    type: object
  models.Usage:
    properties:
      avg_cpu_mem_usage:
        additionalProperties:
          type: number
        description: Average CPU memory usage(s) during lifetime of project
        example:
          global: 45.26
        type: object
      avg_cpu_usage:
        additionalProperties:
          type: number
        description: Average CPU usage(s) during lifetime of project
        example:
          global: 70.12
        type: object
      avg_gpu_mem_usage:
        additionalProperties:
          type: number
        description: Average GPU memory usage(s) during lifetime of project
        example:
          global: 45.26
        type: object
      avg_gpu_usage:
        additionalProperties:
          type: number
        description: Average GPU usage(s) during lifetime of project
        example:
          global: 70.12
        type: object
      cluster_id:
        description: Identifier of the resource manager that owns compute unit. It
          is used to differentiate multiple clusters of same resource manager.
        example: slurm-0
        type: string
      groupname:
        description: User group
        example: grp1
        type: string
      num_units:
        description: Number of consumed units
        example: 145
        type: integer
      project:
        description: Account in batch systems, Tenant in Openstack, Namespace in k8s
        example: prj1
        type: string
      resource_manager:
        description: Name of the resource manager that owns project. Eg slurm, openstack,
          kubernetes, etc
        example: slurm
        type: string
      total_cpu_emissions_gms:
        additionalProperties:
          type: number
        description: Total CPU emissions from source(s) in grams during lifetime of
          project
        example:
          emaps_total: 3.09
          owid_total: 5.22
        type: object
      total_cpu_energy_usage_kwh:
        additionalProperties:
          type: number
        description: Total CPU energy usage(s) in kWh during lifetime of project
        example:
          total: 0.73
        type: object
      total_egress_stats:
        additionalProperties:
          type: number
        description: Total Egress statistics of unit
        example:
          bytes_total: 454342323
          packets_total: 23232323
        type: object
      total_gpu_emissions_gms:
        additionalProperties:
          type: number
        description: Total GPU emissions from source(s) in grams during lifetime of
          project
        example:
          emaps_total: 12.09
          owid_total: 15.22
        type: object
      total_gpu_energy_usage_kwh:
        additionalProperties:
          type: number
        description: Total GPU energy usage(s) in kWh during lifetime of project
        example:
          total: 5.39
        type: object
      total_ingress_stats:
        additionalProperties:
          type: number
        description: Total Ingress statistics of unit
        example:
          bytes_total: 8503405
          packets_total: 43423
        type: object
      total_io_read_stats:
        additionalProperties:
          type: number
        description: Total IO read statistics during lifetime of unit
        example:
          bytes_total: 245000000
          requests_total: 49423
        type: object
      total_io_write_stats:
        additionalProperties:
          type: number
        description: Total IO write statistics during lifetime of unit
        example:
          bytes_total: 12000000
          requests_total: 13923
        type: object
      total_time_seconds:
        additionalProperties:
          type: number
        description: Different times in seconds consumed by the unit. This map must
          contain `walltime`, `alloc_cputime`, `alloc_cpumemtime`, `alloc_gputime`
          and `alloc_gpumem_time` keys.
        example:
          alloc_cpumemtime: 1000
          alloc_cputime: 100
          alloc_gpumemtime: 100
          alloc_gputime: 100
          walltime: 100
        type: object
      username:
        description: Username
        example: usr1
        type: string
    type: object
  models.User:
    properties:
      cluster_id:
        description: Identifier of the resource manager that owns user. It is used
          to differentiate multiple clusters of same resource manager.
        example: slurm-0
        type: string
      name:
        description: Name of the user
        example: usr1
        type: string
      projects:
        description: List of projects of the user
        example:
        - prj1
        - prj2
        items:
          type: string
        type: array
      resource_manager:
        description: Name of the resource manager that owns user. Eg slurm, openstack,
          kubernetes, etc
        example: slurm
        type: string
      tags:
        description: List of meta data tags of the user
        example:
        - tag1
        - tag2
        items:
          type: string
        type: array
      uid:
        description: Unique identifier of the user provided by cluster
        example: "1000"
        type: string
    type: object
externalDocs:
  url: https://mahendrapaipuri.github.io/ceems/
host: ceems-demo.myaddr.tools:7443
info:
  contact:
    email: mahendra.paipuri@gmail.com
    name: Mahendra Paipuri
    url: https://github.com/mahendrapaipuri/ceems/issues
  description: |-
    OpenAPI specification (OAS) for the CEEMS REST API.

    See the Interactive Docs to try CEEMS API methods without writing code, and get
    the complete schema of resources exposed by the API.

    If basic auth is enabled, all the endpoints require authentication.

    All the endpoints, except `health`, `swagger`, `debug` and `demo`,
    must send a user-agent header.

    A demo instance of CEEMS API server is provided for the users to test. This
    instance is running at `https://ceems-demo.myaddr.tools:7443` and it is the
    default server that will serve the requests originating from current OAS client.

    Some of the valid users for this demo instance are:
    - arnold
    - betty
    - edna
    - gazoo
    - wilma

    Every request must contain a `X-Grafana-User` header with one of the usernames
    above as the value to the header. This is how CEEMS API server recognise the user.

    Some of the valid projects for this demo instance are:
    - bedrock
    - cornerstone

    Demo instance have CORS enabled to allow cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and
    accessible to everyone, including any code on any site.

    To test admin resources, users can use `admin` as `X-Grafana-User`.

    Timestamps must be specified in milliseconds, unless otherwise specified.
  license:
    name: GPL-3.0 license
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  title: CEEMS API
  version: "1.0"
  x-logo:
    altText: CEEMS logo
    url: https://raw.githubusercontent.com/mahendrapaipuri/ceems/refs/heads/main/website/static/img/logo.png
paths:
  /clusters/admin:
    get:
      description: |
        This endpoint will list all the cluster IDs in the CEEMS DB. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        This will list all the cluster IDs in the DB. This is primarily
        used to verify the CEEMS load balancer's backend IDs that should match
        with cluster IDs.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Cluster'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: List clusters
      tags:
      - clusters
  /demo/{resource}:
    get:
      description: |-
        This endpoint returns sample response for units and usage models. This
        endpoint do not require the setting of `X-Grafana-User` header as it
        only returns mock data for each request. This can be used to introspect
        the response models for different resources.

        The endpoint requires a path parameter `resource` which takes either:
        - `units` which returns a mock units response
        - `usage` which returns a mock usage response.

        The mock data is generated randomly for each request and there is
        no guarantee that the data has logical sense.
      parameters:
      - description: Whether to return mock units or usage data
        enum:
        - units
        - usage
        in: path
        name: resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Usage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      summary: Demo Units/Usage endpoints
      tags:
      - demo
  /projects:
    get:
      description: |
        This endpoint will show details of the queried project of current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The details include list of users in that project. If current user
        attempts to query a project that they are not part of, empty response
        will be returned
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Project'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Show project details
      tags:
      - projects
  /projects/admin:
    get:
      description: |
        This endpoint will show details of the queried project. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        The details include list of users in that project. If current user
        attempts to query a project that they are not part of, empty response
        will be returned
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Project'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin endpoint to fetch project details
      tags:
      - projects
  /stats/{mode}/admin:
    get:
      description: |
        This admin endpoint will return the quick stats of _queried_ cluster. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        A path parameter `mode` is required to return the kind of usage statistics.
        Currently, two modes of statistics are supported:
        - `current`: In this mode the usage between two time periods is returned
        based on `from` and `to` query parameters.
        - `global`: In this mode the _total_ usage statistics are returned. For
        instance, if the retention period of the DB is set to 2 years, usage
        statistics of last 2 years will be returned.

        The statistics include current number of active users, projects, jobs, _etc_.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - description: Whether to get quick stats within a period or global
        enum:
        - current
        - global
        in: path
        name: mode
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Stat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin Stats
      tags:
      - stats
  /units:
    get:
      description: |-
        This user endpoint will fetch compute units of the current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        If multiple query parameters are passed, for instance, `?uuid=<uuid>&project=<project>`,
        the intersection of query parameters are used to fetch compute units rather than
        the union. That means if the compute unit's `uuid` does not belong to the queried
        project, null response will be returned.

        In order to return the running compute units as well, use the query parameter `running`.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs. If query
        parameter `timezone` is provided, the unit's created, start and end time strings
        will be presented in that time zone.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Unit UUID
        in: query
        items:
          type: string
        name: uuid
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - description: Whether to fetch running units
        in: query
        name: running
        type: boolean
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - description: Time zone in IANA format
        in: query
        name: timezone
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Unit'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: User endpoint for fetching compute units
      tags:
      - units
  /units/admin:
    get:
      description: |-
        This admin endpoint will fetch compute units of _any_ user, compute unit and/or project. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        If multiple query parameters are passed, for instance, `?uuid=<uuid>&user=<user>`,
        the intersection of query parameters are used to fetch compute units rather than
        the union. That means if the compute unit's `uuid` does not belong to the queried
        user, null response will be returned.

        In order to return the running compute units as well, use the query parameter `running`.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs. If query
        parameter `timezone` is provided, the unit's created, start and end time strings
        will be presented in that time zone.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Unit UUID
        in: query
        items:
          type: string
        name: uuid
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: User name
        in: query
        items:
          type: string
        name: user
        type: array
      - description: Whether to fetch running units
        in: query
        name: running
        type: boolean
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - description: Time zone in IANA format
        in: query
        name: timezone
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Unit'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin endpoint for fetching compute units.
      tags:
      - units
  /units/verify:
    get:
      description: |-
        This endpoint will check if the current user is the owner of the
        queried UUIDs. The current user is always identified by the header `X-Grafana-User` in
        the request.

        A response of 200 means that the current user is the owner of the queried UUIDs.
        Any other response code should be treated as the current user not being the owner
        of the queried units.

        The ownership check passes if any of the following conditions are `true`:
        - If the current user is the _direct_ owner of the compute unit.
        - If the current user belongs to the same account/project/namespace as
        the compute unit. This means the users belonging to the same project can
        access each others compute units.
        - If the current user has admin role

        The above checks must pass for **all** the queried units.
        If the check does not pass for at least one queried unit, a response 403 will be
        returned.

        Any 500 response codes should be treated as failed check as well.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Unit UUID
        in: query
        items:
          type: string
        name: uuid
        type: array
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Timestamps
        in: query
        items:
          type: string
        name: time
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Verify unit ownership
      tags:
      - units
  /usage/{mode}:
    get:
      description: |-
        This endpoint will return the usage statistics current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        A path parameter `mode` is required to return the kind of usage statistics.
        Currently, two modes of statistics are supported:
        - `current`: In this mode the usage between two time periods is returned
        based on `from` and `to` query parameters.
        - `global`: In this mode the _total_ usage statistics are returned. For
        instance, if the retention period of the DB is set to 2 years, usage
        statistics of last 2 years will be returned.

        The statistics can be limited to certain projects by passing `project` query,
        parameter.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.

        The `current` usage mode can be slow query depending the requested
        window interval. This is mostly due to the fact that the CEEMS DB
        uses custom JSON types to store metric data and usage statistics
        needs to aggregate metrics over these JSON types using custom aggregate
        functions which can be slow.

        Therefore the query results are cached for 15 min to avoid load on server.
        URL string is used as the cache key. Thus, the query parameters
        `from` and `to` are rounded to the nearest timestamp that are
        multiple of 900 sec (15 min). The first query will make a DB query and
        cache results and subsequent queries, for a given user and same URL
        query parameters, will return the same cached result until the cache
        is invalidated after 15 min.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - description: Whether to get usage stats within a period or global
        enum:
        - current
        - global
        in: path
        name: mode
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Usage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Usage statistics
      tags:
      - usage
  /usage/{mode}/admin:
    get:
      description: |-
        This admin endpoint will return the usage statistics of _queried_ user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        A path parameter `mode` is required to return the kind of usage statistics.
        Currently, two modes of statistics are supported:
        - `current`: In this mode the usage between two time periods is returned
        based on `from` and `to` query parameters.
        - `global`: In this mode the _total_ usage statistics are returned. For
        instance, if the retention period of the DB is set to 2 years, usage
        statistics of last 2 years will be returned.

        The statistics can be limited to certain projects by passing `project` query,
        parameter.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.

        The `current` usage mode can be slow query depending the requested
        window interval. This is mostly due to the fact that the CEEMS DB
        uses custom JSON types to store metric data and usage statistics
        needs to aggregate metrics over these JSON types using custom aggregate
        functions which can be slow.

        Therefore the query results are cached for 15 min to avoid load on server.
        URL string is used as the cache key. Thus, the query parameters
        `from` and `to` are rounded to the nearest timestamp that are
        multiple of 900 sec (15 min). The first query will make a DB query and
        cache results and subsequent queries, for a given user and same URL
        query parameters, will return the same cached result until the cache
        is invalidated after 15 min.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - description: Whether to get usage stats within a period or global
        enum:
        - current
        - global
        in: path
        name: mode
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: csv
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: Username
        in: query
        items:
          type: string
        name: user
        type: array
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Usage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin Usage statistics
      tags:
      - usage
  /users:
    get:
      description: |
        This endpoint will show details of the current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The details include list of projects that user is currently a part of.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Show user details
      tags:
      - users
  /users/admin:
    get:
      description: |
        This endpoint will show details of the queried user(s). The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        When the query parameter `user` is empty, all users will be returned
        in the response.

        The details include list of projects that user is currently a part of.

        When query parameter `role` is set to `admin`, only admin users will
        will be returned. The `tags` values indicates the source of admin user.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: User name
        in: query
        items:
          type: string
        name: user
        type: array
      - collectionFormat: multi
        description: Cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - description: User role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin endpoint for fetching user details of _any_ user.
      tags:
      - users
schemes:
- https
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
