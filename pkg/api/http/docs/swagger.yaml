definitions:
  http.Response-any:
    properties:
      data:
        items: {}
        type: array
      error:
        type: string
      errorType:
        $ref: '#/definitions/http.errorType'
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
    type: object
  http.Response-models_Cluster:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Cluster'
        type: array
      error:
        type: string
      errorType:
        $ref: '#/definitions/http.errorType'
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
    type: object
  http.Response-models_Project:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Project'
        type: array
      error:
        type: string
      errorType:
        $ref: '#/definitions/http.errorType'
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
    type: object
  http.Response-models_Unit:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Unit'
        type: array
      error:
        type: string
      errorType:
        $ref: '#/definitions/http.errorType'
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
    type: object
  http.Response-models_Usage:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Usage'
        type: array
      error:
        type: string
      errorType:
        $ref: '#/definitions/http.errorType'
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
    type: object
  http.Response-models_User:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      error:
        type: string
      errorType:
        $ref: '#/definitions/http.errorType'
      status:
        type: string
      warnings:
        items:
          type: string
        type: array
    type: object
  http.errorType:
    enum:
    - ""
    - unauthorized
    - forbidden
    - timeout
    - canceled
    - execution
    - bad_data
    - internal
    - unavailable
    - not_found
    - not_acceptable
    type: string
    x-enum-varnames:
    - errorNone
    - errorUnauthorized
    - errorForbidden
    - errorTimeout
    - errorCanceled
    - errorExec
    - errorBadData
    - errorInternal
    - errorUnavailable
    - errorNotFound
    - errorNotAcceptable
  models.Allocation:
    additionalProperties: true
    type: object
  models.Cluster:
    properties:
      id:
        type: string
      manager:
        type: string
    type: object
  models.Project:
    properties:
      cluster_id:
        description: Identifier of the resource manager that owns project. It is used
          to differentiate multiple clusters of same resource manager.
        type: string
      name:
        description: Name of the project
        type: string
      resource_manager:
        description: Name of the resource manager that owns project. Eg slurm, openstack,
          kubernetes, etc
        type: string
      tags:
        description: List of meta data tags of the project
        items: {}
        type: array
      uid:
        description: Unique identifier of the project provided by cluster
        type: string
      users:
        description: List of users of the project
        items: {}
        type: array
    type: object
  models.Tag:
    additionalProperties: true
    type: object
  models.Unit:
    properties:
      allocation:
        allOf:
        - $ref: '#/definitions/models.Allocation'
        description: Allocation map of unit. Only string and int64 values are supported
          in map
      avg_cpu_mem_usage:
        description: Average CPU memory during lifetime of unit
        type: number
      avg_cpu_usage:
        description: Average CPU usage during lifetime of unit
        type: number
      avg_gpu_mem_usage:
        description: Average GPU memory during lifetime of unit
        type: number
      avg_gpu_usage:
        description: Average GPU usage during lifetime of unit
        type: number
      cluster_id:
        description: Identifier of the resource manager that owns compute unit. It
          is used to differentiate multiple clusters of same resource manager.
        type: string
      created_at:
        description: Creation time
        type: string
      created_at_ts:
        description: Creation timestamp
        type: integer
      elapsed:
        description: Human readable total elapsed time string
        type: string
      ended_at:
        description: End time
        type: string
      ended_at_ts:
        description: End timestamp
        type: integer
      grp:
        description: User group
        type: string
      name:
        description: Name of compute unit
        type: string
      project:
        description: Account in batch systems, Tenant in Openstack, Namespace in k8s
        type: string
      resource_manager:
        description: Name of the resource manager that owns compute unit. Eg slurm,
          openstack, kubernetes, etc
        type: string
      started_at:
        description: Start time
        type: string
      started_at_ts:
        description: Start timestamp
        type: integer
      state:
        description: Current state of unit
        type: string
      tags:
        allOf:
        - $ref: '#/definitions/models.Tag'
        description: A map to store generic info. String and int64 are valid value
          types of map
      total_cpu_emissions_gms:
        description: Total CPU emissions in grams during lifetime of unit
        type: number
      total_cpu_energy_usage_kwh:
        description: Total CPU energy usage in kWh during lifetime of unit
        type: number
      total_cputime_seconds:
        description: Total number of CPU seconds consumed by the unit
        type: integer
      total_gpu_emissions_gms:
        description: Total GPU emissions in grams during lifetime of unit
        type: number
      total_gpu_energy_usage_kwh:
        description: Total GPU energy usage in kWh during lifetime of unit
        type: number
      total_gputime_seconds:
        description: Total number of GPU seconds consumed by the unit
        type: integer
      total_ingress_in_gb:
        description: Total ingress traffic in GB of unit
        type: number
      total_io_read_cold_gb:
        description: Total IO read on cold storage in GB during lifetime of unit
        type: number
      total_io_read_hot_gb:
        description: Total IO read on hot storage in GB during lifetime of unit
        type: number
      total_io_write_cold_gb:
        description: Total IO write on cold storage in GB during lifetime of unit
        type: number
      total_io_write_hot_gb:
        description: Total IO write on hot storage in GB during lifetime of unit
        type: number
      total_outgress_in_gb:
        description: Total outgress traffic in GB of unit
        type: number
      total_walltime_seconds:
        description: Total elapsed wall time in seconds
        type: integer
      usr:
        description: Username
        type: string
      uuid:
        description: Unique identifier of unit. It can be Job ID for batch jobs, UUID
          for pods in k8s or VMs in Openstack
        type: string
    type: object
  models.Usage:
    properties:
      avg_cpu_mem_usage:
        description: Average CPU memory during lifetime of project
        type: number
      avg_cpu_usage:
        description: Average CPU usage during lifetime of project
        type: number
      avg_gpu_mem_usage:
        description: Average GPU memory during lifetime of project
        type: number
      avg_gpu_usage:
        description: Average GPU usage during lifetime of project
        type: number
      cluster_id:
        description: Identifier of the resource manager that owns compute unit. It
          is used to differentiate multiple clusters of same resource manager.
        type: string
      num_units:
        description: Number of consumed units
        type: integer
      project:
        description: Account in batch systems, Tenant in Openstack, Namespace in k8s
        type: string
      resource_manager:
        description: Name of the resource manager that owns project. Eg slurm, openstack,
          kubernetes, etc
        type: string
      total_cpu_emissions_gms:
        description: Total CPU emissions in grams during lifetime of project
        type: number
      total_cpu_energy_usage_kwh:
        description: Total CPU energy usage in kWh during lifetime of project
        type: number
      total_cpumemtime_seconds:
        description: Total number of CPU memory (in MB) seconds consumed by the project
        type: integer
      total_cputime_seconds:
        description: Total number of CPU seconds consumed by the project
        type: integer
      total_gpu_emissions_gms:
        description: Total GPU emissions in grams during lifetime of project
        type: number
      total_gpu_energy_usage_kwh:
        description: Total GPU energy usage in kWh during lifetime of project
        type: number
      total_gpumemtime_seconds:
        description: Total number of GPU memory (in MB) seconds consumed by the project
        type: integer
      total_gputime_seconds:
        description: Total number of GPU seconds consumed by the project
        type: integer
      total_ingress_in_gb:
        description: Total ingress traffic in GB of project
        type: number
      total_io_read_cold_gb:
        description: Total IO read on cold storage in GB during lifetime of project
        type: number
      total_io_read_hot_gb:
        description: Total IO read on hot storage in GB during lifetime of project
        type: number
      total_io_write_cold_gb:
        description: Total IO write on cold storage in GB during lifetime of project
        type: number
      total_io_write_hot_gb:
        description: Total IO write on hot storage in GB during lifetime of project
        type: number
      total_outgress_in_gb:
        description: Total outgress traffic in GB of project
        type: number
      total_walltime_seconds:
        description: Total elapsed wall time in seconds consumed by the project
        type: integer
      usr:
        description: Username
        type: string
    type: object
  models.User:
    properties:
      cluster_id:
        description: Identifier of the resource manager that owns user. It is used
          to differentiate multiple clusters of same resource manager.
        type: string
      name:
        description: Name of the user
        type: string
      projects:
        description: List of projects of the user
        items: {}
        type: array
      resource_manager:
        description: Name of the resource manager that owns user. Eg slurm, openstack,
          kubernetes, etc
        type: string
      tags:
        description: List of meta data tags of the user
        items: {}
        type: array
      uid:
        description: Unique identifier of the user provided by cluster
        type: string
    type: object
externalDocs:
  url: https://mahendrapaipuri.github.io/ceems/
info:
  contact:
    email: mahendra.paipuri@gmail.com
    name: Mahendra Paipuri
    url: https://github.com/mahendrapaipuri/ceems/issues
  description: |-
    OpenAPI specification (OAS) for the CEEMS REST API.

    See the Interactive Docs to try CEEMS API methods without writing code, and get
    the complete schema of resources exposed by the API.

    If basic auth is enabled, all the endpoints require authentication.

    All the endpoints, except `health`, `swagger`, `debug` and `demo`,
    must send a user-agent header.

    Timestamps must be specified in milliseconds, unless otherwise specified.
  license:
    name: BSD-3-Clause license
    url: https://opensource.org/license/bsd-3-clause
  title: CEEMS API
  version: "1.0"
paths:
  /clusters/admin:
    get:
      description: |
        This endpoint will list all the cluster IDs in the CEEMS DB. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        This will list all the cluster IDs in the DB. This is primarily
        used to verify the CEEMS load balancer's backend IDs that should match
        with cluster IDs.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Cluster'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: List clusters
      tags:
      - clusters
  /demo/{resource}:
    get:
      description: |-
        This endpoint returns sample response for units and usage models. This
        endpoint do not require the setting of `X-Grafana-User` header as it
        only returns mock data for each request. This can be used to introspect
        the response models for different resources.

        The endpoint requires a path parameter `resource` which takes either:
        - `units` which returns a mock units response
        - `usage` which returns a mock usage response.

        The mock data is generated randomly for each request and there is
        no guarantee that the data has logical sense.
      parameters:
      - description: Whether to return mock units or usage data
        enum:
        - units
        - usage
        in: path
        name: resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Usage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      summary: Demo Units/Usage endpoints
      tags:
      - demo
  /health:
    get:
      description: |-
        This endpoint returns the health status of the server.

        A healthy server returns 200 response code and any other
        responses should be treated as unhealthy server.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "503":
          description: Service Unavailable
          schema:
            type: string
      summary: Health status
      tags:
      - health
  /projects:
    get:
      description: |
        This endpoint will show details of the queried project of current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The details include list of users in that project. If current user
        attempts to query a project that they are not part of, empty response
        will be returned
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Project'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Show project details
      tags:
      - projects
  /projects/admin:
    get:
      description: |
        This endpoint will show details of the queried project. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        The details include list of users in that project. If current user
        attempts to query a project that they are not part of, empty response
        will be returned
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Project'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin ednpoint to fetch project details
      tags:
      - projects
  /units:
    get:
      description: |-
        This user endpoint will fetch compute units of the current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        If multiple query parameters are passed, for instance, `?uuid=<uuid>&project=<project>`,
        the intersection of query parameters are used to fetch compute units rather than
        the union. That means if the compute unit's `uuid` does not belong to the queried
        project, null response will be returned.

        In order to return the running compute units as well, use the query parameter `running`.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Unit UUID
        in: query
        items:
          type: string
        name: uuid
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - description: Whether to fetch running units
        in: query
        name: running
        type: boolean
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Unit'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: User endpoint for fetching compute units
      tags:
      - units
  /units/admin:
    get:
      description: |-
        This admin endpoint will fetch compute units of _any_ user, compute unit and/or project. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        If multiple query parameters are passed, for instance, `?uuid=<uuid>&user=<user>`,
        the intersection of query parameters are used to fetch compute units rather than
        the union. That means if the compute unit's `uuid` does not belong to the queried
        user, null response will be returned.

        In order to return the running compute units as well, use the query parameter `running`.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Unit UUID
        in: query
        items:
          type: string
        name: uuid
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - collectionFormat: multi
        description: User name
        in: query
        items:
          type: string
        name: user
        type: array
      - description: Whether to fetch running units
        in: query
        name: running
        type: boolean
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Unit'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin endpoint for fetching compute units.
      tags:
      - units
  /units/verify:
    get:
      description: |-
        This endpoint will check if the current user is the owner of the
        queried UUIDs. The current user is always identified by the header `X-Grafana-User` in
        the request.

        A response of 200 means that the current user is the owner of the queried UUIDs.
        Any other response code should be treated as the current user not being the owner
        of the queried units.

        The ownership check passes if any of the following conditions are `true`:
        - If the current user is the _direct_ owner of the compute unit.
        - If the current user belongs to the same account/project/namespace as
        the compute unit. This means the users belonging to the same project can
        access each others compute units.

        The above checks must pass for **all** the queried units.
        If the check does not pass for at least one queried unit, a response 403 will be
        returned.

        Any 500 response codes should be treated as failed check as well.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: Unit UUID
        in: query
        items:
          type: string
        name: uuid
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Verify unit ownership
      tags:
      - units
  /usage/{mode}:
    get:
      description: |-
        This endpoint will return the usage statistics current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        A path parameter `mode` is required to return the kind of usage statistics.
        Currently, two modes of statistics are supported:
        - `current`: In this mode the usage between two time periods is returned
        based on `from` and `to` query parameters.
        - `global`: In this mode the _total_ usage statistics are returned. For
        instance, if the retention period of the DB is set to 2 years, usage
        statistics of last 2 years will be returned.

        The statistics can be limited to certain projects by passing `project` query,
        parameter.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - description: Whether to get usage stats within a period or global
        enum:
        - current
        - global
        in: path
        name: mode
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Usage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Usage statistics
      tags:
      - usage
  /usage/{mode}/admin:
    get:
      description: |-
        This admin endpoint will return the usage statistics of _queried_ user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        A path parameter `mode` is required to return the kind of usage statistics.
        Currently, two modes of statistics are supported:
        - `current`: In this mode the usage between two time periods is returned
        based on `from` and `to` query parameters.
        - `global`: In this mode the _total_ usage statistics are returned. For
        instance, if the retention period of the DB is set to 2 years, usage
        statistics of last 2 years will be returned.

        The statistics can be limited to certain projects by passing `project` query,
        parameter.

        If `to` query parameter is not provided, current time will be used. If `from`
        query parameter is not used, a default query window of 24 hours will be used.
        It means if `to` is provided, `from` will be calculated as `to` - 24hrs.

        To limit the number of fields in the response, use `field` query parameter. By default, all
        fields will be included in the response if they are _non-empty_.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - description: Whether to get usage stats within a period or global
        enum:
        - current
        - global
        in: path
        name: mode
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      - collectionFormat: multi
        description: Project
        in: query
        items:
          type: string
        name: project
        type: array
      - description: From timestamp
        in: query
        name: from
        type: string
      - description: To timestamp
        in: query
        name: to
        type: string
      - collectionFormat: multi
        description: Fields to return in response
        in: query
        items:
          type: string
        name: field
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_Usage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin Usage statistics
      tags:
      - usage
  /users:
    get:
      description: |
        This endpoint will show details of the current user. The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The details include list of projects that user is currently a part of.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Show user details
      tags:
      - users
  /users/admin:
    get:
      description: |
        This endpoint will show details of the queried user(s). The
        current user is always identified by the header `X-Grafana-User` in
        the request.

        The user who is making the request must be in the list of admin users
        configured for the server.

        The details include list of projects that user is currently a part of.
      parameters:
      - description: Current user name
        in: header
        name: X-Grafana-User
        required: true
        type: string
      - collectionFormat: multi
        description: User name
        in: query
        items:
          type: string
        name: user
        type: array
      - collectionFormat: multi
        description: cluster ID
        in: query
        items:
          type: string
        name: cluster_id
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response-models_User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.Response-any'
      security:
      - BasicAuth: []
      summary: Admin endpoint for fetching user details of _any_ user.
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
