# Configuration file to configure CEEMS API server
#
# This config file has following sections:
#  - `ceems_api_server`: Core configuration of CEEMS API server
#  - `clusters`: Configuration of clusters that are being monitored
#  - `updaters`: Configuration of updaters
#
---
# CEEMS API Server and data config
ceems_api_server:
  # Data related configuration of the CEEMS API server. This config concerns with the 
  # locations where data will be saved, frequency of data updates, etc.
  #
  data:
    # Path at which CEEMS API server data will be stored.
    # If relative path is used, it will be resolved based on the current working directory.
    #
    path: /var/lib/ceems

    # Units data will be fetched at this interval. CEEMS will pull the units from the 
    # underlying resource manager at this frequency into its own DB.
    #
    # Units Supported: y, w, d, h, m, s, ms.
    #
    update_interval: 15m

    # The duration to retain the data in the DB. Units older than this duration will be
    # purged from the DB. 
    #
    # In the case of global usage stats, if the last activity on a given project/user 
    # combination is older than this period, those stats will be purged from the DB.
    #
    # Units Supported: y, w, d, h, m, s, ms.
    #
    retention_period: 30d

    # Time zone to be used when storing times of different events in the DB.
    # It takes a value defined in IANA (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
    # like `Europe/Paris`
    #
    # If left empty or not configured, UTC will be used. 
    # A special value `Local` can be used to use server local time zone.
    #
    time_zone: Local

    # CEEMS API server is capable of creating DB backups using SQLite backup API. Created
    # DB backups will be saved to this path. NOTE that for huge DBs, this backup can take 
    # a considerable amount of time. 
    #
    # Use a different disk device than `ceems_api_server.data.path` to achieve 
    # fault tolerance.
    #
    # If the path is empty, no backups will be created.
    #
    backup_path: ''

    # The interval at which DB back ups will be created. 
    #
    # Minimum allowable interval is `1d`, ie, 1 day.
    #
    # Units Supported: y, w, d, h, m, s, ms.
    #
    backup_interval: 1d

  # HTTP web admin related config for CEEMS API server
  #
  admin:
    # List of users that will have admin privileges for accessing CEEMS API server
    #
    # These users will have full access to DB and can query stats of any user/project.
    #
    # In addition, it is possible to pull users from Grafana teams and add them to 
    # admin users. Check `grafana` configuration on how to fetch users from Grafana.
    #
    users: []

    # Besides setting a static list of admin users using `ceems_api_server.web.admin_users`,
    # it is possible to pull the users from a given Grafana instance and update the admin users
    # list of CEEMS API server. This allows operators to add new admins to CEEMS API server
    # without having to restart `ceems_api_server`. 
    #
    # Typically, one or several Grafana team(s) can be created dedicated to CEEMS admins and 
    # CEEMS API server will fetch the Grafana team members at the same frequency as compute 
    # units.
    #
    # The web config of Grafana can be set in the following section:
    #
    grafana: {}
      # # Web URL of the Grafana instance
      # #
      # url: ''

      # # List of IDs of the Grafana teams from which the members will be synchronized 
      # # with CEEMS admin users
      # #
      # teams_ids: []

      # # Sets the `Authorization` header on every API request with the
      # # configured username and password.
      # # password and password_file are mutually exclusive.
      # #
      # basic_auth: {}
      #   # username: ''
      #   # password: ''
      #   # password_file: ''

      # # Sets the `Authorization` header on every API request with
      # # the configured credentials.
      # #
      # authorization: {}
      #   # # Sets the authentication type of the request. Default is `Bearer`.
      #   # type: Bearer
      #   # # Sets the credentials of the request. It is mutually exclusive with
      #   # # `credentials_file`.
      #   # credentials: ''
      #   # # Sets the credentials of the request with the credentials read from the
      #   # # configured file. It is mutually exclusive with `credentials`.
      #   # credentials_file: ''

      # # Optional OAuth 2.0 configuration.
      # # Cannot be used at the same time as basic_auth or authorization.
      # #
      # oauth2: {}
      #   # client_id: ''
      #   # client_secret: ''
      #   # # Read the client secret from a file.
      #   # # It is mutually exclusive with `client_secret`.
      #   # client_secret_file: ''
      #   # # Scopes for the token request.
      #   # scopes: []
      #   # # The URL to fetch the token from.
      #   # token_url: ''
      #   # # Optional parameters to append to the token URL.
      #   # endpoint_params: {}
      #   # # Configures the token request's TLS settings.
      #   # tls_config: {}

      # # Configure whether API requests follow HTTP 3xx redirects.
      # # Default is true
      # #
      # follow_redirects: true

      # # Whether to enable HTTP2.
      # # Default is true
      # #
      # enable_http2: true

      # # Configures the API request's TLS settings.
      # #
      # tls_config: {}
      #   # # CA certificate to validate API server certificate with. 
      #   # # At most one of ca and ca_file is allowed.
      #   # #
      #   # ca: ''
      #   # ca_file: ''

      #   # # Certificate and key for client cert authentication to the server.
      #   # # At most one of cert and cert_file is allowed.
      #   # # At most one of key and key_file is allowed.
      #   # #
      #   # cert: ''
      #   # cert_file: ''
      #   # key: ''
      #   # key_file: ''

      #   # # Disable validation of the server certificate.
      #   # #
      #   # insecure_skip_verify: false

      #   # # Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
      #   # # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
      #   # # If unset, Prometheus will use Go default minimum version, which is TLS 1.2.
      #   # # See MinVersion in https://pkg.go.dev/crypto/tls#Config.
      #   # #
      #   # min_version: ''
      #   # # Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
      #   # # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
      #   # # If unset, Prometheus will use Go default maximum version, which is TLS 1.3.
      #   # # See MaxVersion in https://pkg.go.dev/crypto/tls#Config.
      #   # #
      #   # max_version: ''
  
      # # List of headers that will be passed in the API requests to the server.
      # # Authentication related headers may be configured in this section. Header name
      # # must be configured as key and header value supports three different types of 
      # # headers: values, secrets and files.
      # #
      # # The difference between values and secrets is that secret will be redacted
      # # in server logs where as values will be emitted in the logs.
      # #
      # # Values are regular headers with values, secrets are headers that pass secret
      # # information like tokens and files pass the file content in the headers.
      # #
      # # Example:
      # # http_headers:
      # #   one:
      # #     values: [value1a, value1b, value1c]
      # #   two:
      # #     values: [value2a]
      # #     secrets: [value2b, value2c]
      # #   three:
      # #     files: [testdata/headers-file-a, testdata/headers-file-b, testdata/headers-file-c]
      # #
      # http_headers: {}

  # HTTP web related config for CEEMS API server.
  #
  web:
    # Maximum allowable query range, ie, the difference between `from` and `to` query 
    # parameters. 
    #
    # This can be used to restrict the query range made by the users to avoid OOM errors
    # when handling too much data.
    #
    # Default value `0s` means no restrictions are imposed on the query.
    #
    # Units Supported: y, w, d, h, m, s, ms.
    #
    max_query: 0s

    # Number of requests allowed in ONE MINUTE per client identified by Real IP address.
    # Request headers `True-Client-IP`, `X-Real-IP` and `X-Forwarded-For` are looked up
    # to get the real IP address.
    #
    # This is to effectively impose a rate limit for the entire CEEMS server irrespective
    # of URL path. We advise to set it to a value based on your needs to avoid DoS/DDoS
    # attacks.
    #
    # Rate limiting is done using the Sliding Window Counter pattern inspired by 
    # CloudFlare https://blog.cloudflare.com/counting-things-a-lot-of-different-things/
    #
    # Default value `0` means no rate limiting is applied.
    #
    requests_limit: 0

    # It will be used to prefix all HTTP endpoints served by CEEMS API server. 
    # For example, if CEEMS API server is served via a reverse proxy. 
    # 
    # Default is '/'
    #
    route_prefix: '/'

# A list of clusters from which CEEMS API server will fetch the compute units.
# 
# Each cluster must provide an unique `id`. The `id` will enable CEEMS to identify 
# different clusters in multi-cluster setup. This `id` must be consistent throughout 
# all the CEEMS components.
# 
clusters: []
  #   # Identifier of the cluster. Must be unique for each cluster
  #   #
  #   # Use an id that end users can identify, for instance, name of the cluster.
  #   #
  # - id: default

  #   # Resource manager of the cluster. Currently only `slurm` is supported. In future,
  #   # `openstack` will be supported
  #   #
  #   manager: slurm

  #   # List of updater IDs to run on the compute units of current cluster. The updaters
  #   # will be run in the same order as provided in the list.
  #   #
  #   # ID of each updater is set in the `updaters` section of the config. If an unknown
  #   # ID is provided here, it will be ignored during the update step.
  #   #
  #   updaters: []

  #   # CLI tool configuration.
  #   # 
  #   # If the resource manager supports fetching compute units data from a CLI tool,
  #   # this section can be used to configure the tool. This can be manily used to configure
  #   # SLURM CLI utility tools that can be used to fetch job data.
  #   #
  #   # When SLURM resource manager is configured to fetch job data using `sacct` command,
  #   # execution mode of the command will be decided as follows:
  #   #
  #   #  - If the current user running `ceems_api_server` is `root`, `sacct`
  #   #    command will be executed as that user in a security context.
  #   #
  #   #  - If the `ceems_api_server` process has `CAP_SETUID` and `CAP_SETGID` capabilities, `sacct` 
  #   #    command will be executed as `root` user in a security context.
  #   #
  #   #  - As a last attempt, we attempt to execute `sacct` with `sudo` prefix. If
  #   #    the current user running `ceems_api_server` is in the list of sudoers, this check
  #   #    will pass and `sacct` will be always executed as `sudo sacct <args>` to fetch jobs.
  #   #
  #   # If none of the above conditions are true, `sacct` will be executed as the current user 
  #   # which might not give job data of _all_ users in the cluster.
  #   #
  #   # If the operators are unsure which method to use, there is a default systemd
  #   # unit file provided in the repo that uses Linux capabilities. Use that file as 
  #   # starting point and modify the CLI args accordingly
  #   #
  #   # If no `cli` and no `web` config is found, `ceems_api_server` will check
  #   # if CLI utilities like `sacct` exist on `PATH` and if found, will use them.
  #   #
  #   # Systemd Unit File:
  #   # https://github.com/mahendrapaipuri/ceems/blob/main/build/package/ceems_api_server/ceems_api_server.service
  #   #
  #   cli:
  #     # Path to the binaries of the CLI utilities.
  #     #
  #     path: ''

  #     # An object of environment variables that will be injected while executing the 
  #     # CLI utilities to fetch compute unit data. 
  #     #
  #     environment_variables: {}
  #       # NAME: value  # Environment variable name value pair

  #   # If the resource manager supports API server, configure the REST API
  #   # server details here.
  #   #
  #   # When configured, REST API server is always prefered over CLI utilities for 
  #   # fetching compute units
  #   #
  #   # Most of the web configuration has been inspired from Prometheus `scrape_config`
  #   # and its utility functions are used to create HTTP client using the configuration
  #   # set below.
  #   # 
  #   web:
  #     # External URL at which the API server is exposed.
  #     #
  #     url: ''

  #     # Sets the `Authorization` header on every API request with the
  #     # configured username and password.
  #     # password and password_file are mutually exclusive.
  #     #
  #     basic_auth: {}
  #       # username: ''
  #       # password: ''
  #       # password_file: ''

  #     # Sets the `Authorization` header on every API request with
  #     # the configured credentials.
  #     #
  #     authorization: {}
  #       # # Sets the authentication type of the request. Default is `Bearer`.
  #       # type: Bearer
  #       # # Sets the credentials of the request. It is mutually exclusive with
  #       # # `credentials_file`.
  #       # credentials: ''
  #       # # Sets the credentials of the request with the credentials read from the
  #       # # configured file. It is mutually exclusive with `credentials`.
  #       # credentials_file: ''

  #     # Optional OAuth 2.0 configuration.
  #     # Cannot be used at the same time as basic_auth or authorization.
  #     #
  #     oauth2: {}
  #       # client_id: ''
  #       # client_secret: ''
  #       # # Read the client secret from a file.
  #       # # It is mutually exclusive with `client_secret`.
  #       # client_secret_file: ''
  #       # # Scopes for the token request.
  #       # scopes: []
  #       # # The URL to fetch the token from.
  #       # token_url: ''
  #       # # Optional parameters to append to the token URL.
  #       # endpoint_params: {}
  #       # # Configures the token request's TLS settings.
  #       # tls_config: {}

  #     # Configure whether API requests follow HTTP 3xx redirects.
  #     # Default is true
  #     #
  #     follow_redirects: true

  #     # Whether to enable HTTP2.
  #     # Default is true
  #     #
  #     enable_http2: true

  #     # Configures the API request's TLS settings.
  #     #
  #     tls_config: {}
  #       # # CA certificate to validate API server certificate with. 
  #       # # At most one of ca and ca_file is allowed.
  #       # #
  #       # ca: ''
  #       # ca_file: ''

  #       # # Certificate and key for client cert authentication to the server.
  #       # # At most one of cert and cert_file is allowed.
  #       # # At most one of key and key_file is allowed.
  #       # #
  #       # cert: ''
  #       # cert_file: ''
  #       # key: ''
  #       # key_file: ''

  #       # # Disable validation of the server certificate.
  #       # #
  #       # insecure_skip_verify: false

  #       # # Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
  #       # # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
  #       # # If unset, Prometheus will use Go default minimum version, which is TLS 1.2.
  #       # # See MinVersion in https://pkg.go.dev/crypto/tls#Config.
  #       # #
  #       # min_version: ''
  #       # # Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
  #       # # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
  #       # # If unset, Prometheus will use Go default maximum version, which is TLS 1.3.
  #       # # See MaxVersion in https://pkg.go.dev/crypto/tls#Config.
  #       # #
  #       # max_version: ''
      
  #     # List of headers that will be passed in the API requests to the server.
  #     # Authentication related headers may be configured in this section. Header name
  #     # must be configured as key and header value supports three different types of 
  #     # headers: values, secrets and files.
  #     #
  #     # The difference between values and secrets is that secret will be redacted
  #     # in server logs where as values will be emitted in the logs.
  #     #
  #     # Values are regular headers with values, secrets are headers that pass secret
  #     # information like tokens and files pass the file content in the headers.
  #     #
  #     # Example:
  #     # http_headers:
  #     #   one:
  #     #     values: [value1a, value1b, value1c]
  #     #   two:
  #     #     values: [value2a]
  #     #     secrets: [value2b, value2c]
  #     #   three:
  #     #     files: [testdata/headers-file-a, testdata/headers-file-b, testdata/headers-file-c]
  #     #
  #     # SLURM supports JWT tokens to authenticate against REST API server which 
  #     # can be generated using `scontrol` command. SLURM expects this token in the 
  #     # `X-SLURM-USER-TOKEN` request header. Similarly the user name can be configured
  #     # using `X-SLURM-USER-NAME` header.
  #     #
  #     # For instance, `scontrol token` will generate a token. By default, these tokens
  #     # are only valid for short time, around 30 min, and to generate a token with long
  #     # life time, use command `scontrol token lifespan=<SECONDS>`. 
  #     #
  #     # Use longer lifespans so that token do not need to be rotated frequently.
  #     # Docs: https://slurm.schedmd.com/rest_quickstart.html#basic_usage
  #     #
  #     # In the case of Openstack, authentication token maybe configured using `X-Auth-Token`
  #     # header.
  #     #
  #     http_headers: {}
  #       # X-SLURM-USER-NAME:
  #       #   values:
  #       #     - slurm
  #       # X-SLURM-USER-TOKEN:
  #       #   secrets:
  #       #     - mysecrettoken
  #       # X-Auth-Token:
  #       #   secrets:
  #       #     - mysecrettoken

  #   # Any other configuration needed to reach API server of the resource manager
  #   # can be configured in this section.
  #   #
  #   # Currently this section is used for Openstack resource manager
  #   # to configure API versions
  #   #
  #   # In the case of Openstack, this section must have two keys `api_service_endpoints`
  #   # and `auth`. Both of these are compulsory.
  #   # `api_service_endpoints` must provide API endpoints for compute and identity
  #   # services as provided in service catalog of Openstack cluster. `auth` must be the
  #   # same `auth` object that must be sent in POST request to keystone to get a API token.
  #   #
  #   extra_config: {}
  #      # api_service_endpoints:
  #      #   compute: https://openstack-nova.example.com/v2.1
  #      #   identity: https://openstack-keystone.example.com
  #      # auth:
  #      #   identity:
  #      #     methods:
  #      #       - password
  #      #     password:
  #      #       user:
  #      #         name: admin
  #      #         password: supersecret
    
# A list of Updaters that will be used to update the compute unit metrics. This update 
# step can be used to update the aggregate metrics of each compute unit in real time
# or to add complementary information to the compute units from on-premise third 
# party services.
#
# Currently only TSDB updater is supported. The compute unit aggregate metrics can be
# updated from TSDB (Prometheus/VM) instances.
#
updaters: []
  #   # Identifier of the updater. Must be unique for each updater
  #   #
  #   # This identifier should be used in the `updaters` section inside each 
  #   # `clusters` config to update the compute units of that resource manager with a
  #   # given updater.
  #   #
  # - id: default

  #   # Updater kind. Currently only `tsdb` is supported.
  #   #
  #   updater: tsdb

  #   # Web Config of the updater.
  #   #
  #   web:
  #     # The external URL at which the updater instance is reachable.
  #     #
  #     url: ''

  #     # Sets the `Authorization` header on every API request with the
  #     # configured username and password.
  #     # password and password_file are mutually exclusive.
  #     #
  #     basic_auth: {}
  #       # username: ''
  #       # password: ''
  #       # password_file: ''

  #     # Sets the `Authorization` header on every API request with
  #     # the configured credentials.
  #     #
  #     authorization: {}
  #       # # Sets the authentication type of the request. Default is `Bearer`.
  #       # type: Bearer
  #       # # Sets the credentials of the request. It is mutually exclusive with
  #       # # `credentials_file`.
  #       # credentials: ''
  #       # # Sets the credentials of the request with the credentials read from the
  #       # # configured file. It is mutually exclusive with `credentials`.
  #       # credentials_file: ''

  #     # Optional OAuth 2.0 configuration.
  #     # Cannot be used at the same time as basic_auth or authorization.
  #     #
  #     oauth2: {}
  #       # client_id: ''
  #       # client_secret: ''
  #       # # Read the client secret from a file.
  #       # # It is mutually exclusive with `client_secret`.
  #       # client_secret_file: ''
  #       # # Scopes for the token request.
  #       # scopes: []
  #       # # The URL to fetch the token from.
  #       # token_url: ''
  #       # # Optional parameters to append to the token URL.
  #       # endpoint_params: {}
  #       # # Configures the token request's TLS settings.
  #       # tls_config: {}

  #     # Configure whether API requests follow HTTP 3xx redirects.
  #     # Default is true
  #     #
  #     follow_redirects: true

  #     # Whether to enable HTTP2.
  #     # Default is true
  #     #
  #     enable_http2: true

  #     # Configures the API request's TLS settings.
  #     #
  #     tls_config: {}
  #       # # CA certificate to validate API server certificate with. 
  #       # # At most one of ca and ca_file is allowed.
  #       # #
  #       # ca: ''
  #       # ca_file: ''

  #       # # Certificate and key for client cert authentication to the server.
  #       # # At most one of cert and cert_file is allowed.
  #       # # At most one of key and key_file is allowed.
  #       # #
  #       # cert: ''
  #       # cert_file: ''
  #       # key: ''
  #       # key_file: ''

  #       # # Disable validation of the server certificate.
  #       # #
  #       # insecure_skip_verify: false

  #       # # Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
  #       # # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
  #       # # If unset, Prometheus will use Go default minimum version, which is TLS 1.2.
  #       # # See MinVersion in https://pkg.go.dev/crypto/tls#Config.
  #       # #
  #       # min_version: ''
  #       # # Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS
  #       # # 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).
  #       # # If unset, Prometheus will use Go default maximum version, which is TLS 1.3.
  #       # # See MaxVersion in https://pkg.go.dev/crypto/tls#Config.
  #       # #
  #       # max_version: ''
      
  #     # List of headers that will be passed in the API requests to the server.
  #     # Authentication related headers may be configured in this section. Header name
  #     # must be configured as key and header value supports three different types of 
  #     # headers: values, secrets and files.
  #     #
  #     # The difference between values and secrets is that secret will be redacted
  #     # in server logs where as values will be emitted in the logs.
  #     #
  #     # Values are regular headers with values, secrets are headers that pass secret
  #     # information like tokens and files pass the file content in the headers.
  #     #
  #     # Example:
  #     # http_headers:
  #     #   one:
  #     #     values: [value1a, value1b, value1c]
  #     #   two:
  #     #     values: [value2a]
  #     #     secrets: [value2b, value2c]
  #     #   three:
  #     #     files: [testdata/headers-file-a, testdata/headers-file-b, testdata/headers-file-c]
  #     #
  #     # SLURM supports JWT tokens to authenticate against REST API server which 
  #     # can be generated using `scontrol` command. SLURM expects this token in the 
  #     # `X-SLURM-USER-TOKEN` request header. Similarly the user name can be configured
  #     # using `X-SLURM-USER-NAME` header.
  #     #
  #     # For instance, `scontrol token` will generate a token. By default, these tokens
  #     # are only valid for short time, around 30 min, and to generate a token with long
  #     # life time, use command `scontrol token lifespan=<SECONDS>`. 
  #     #
  #     # Use longer lifespans so that token do not need to be rotated frequently.
  #     # Docs: https://slurm.schedmd.com/rest_quickstart.html#basic_usage
  #     #
  #     # In the case of Openstack, authentication token maybe configured using `X-Auth-Token`
  #     # header.
  #     #
  #     http_headers: {}

  #   # Any other configuration needed for the updater instance can be configured 
  #   # in this section.
  #   # Currently this section is used for `tsdb` updater to conifgure the queries that
  #   # will be used to aggregate the compute unit metrics.
  #   #
  #   extra_config:
  #     # Compute units that have total life time less than this value will be deleted from 
  #     # TSDB to reduce number of labels and cardinality
  #     #
  #     # Default value `0s` means no compute units will be purged.
  #     #
  #     # Units Supported: y, w, d, h, m, s, ms.
  #     #
  #     cutoff_duration: 0s

  #     # Query batch size when making TSDB queries.
  #     # CEEMS making queries in batches in order to avoid OOM errors on TSDB.
  #     # This parameter can be used to configure the number of compute units queried
  #     # in a single query. 
  #     #
  #     # Set this value based on your `--query.max-samples` parameter set to TSDB and 
  #     # scrape interval. For instance, at a given time, if there are 80k compute units
  #     # running, TSDB is scrapping at a rate of 5sec and CEEMS is updating for every 
  #     # 60 min. In this case, a given metric for 20k compute units will have 
  #     # 80,000 * (60 * 60) / 5 = 57600000 samples in the query. The default value 
  #     # used by Prometheus for `--query.max-samples` is 50000000 which is less than
  #     # what we got in the calculation in the example. Thus, we need to make multiple
  #     # queries by batching the compute units. In the current example, using a batch
  #     # size of 40k should work, however, we recommend using much lesser batch sizes
  #     # to protect TSDB from over consuming the memory.
  #     #
  #     # Default value is 1000 and it should work in most of the cases
  #     #
  #     query_batch_size: 1000

  #     # List of labels to delete from TSDB. These labels should be valid matchers for TSDB
  #     # More information of delete API of Prometheus https://prometheus.io/docs/prometheus/latest/querying/api/#delete-series
  #     #
  #     # TSDB must be started with --web.enable-admin-api flag for this to work
  #     #
  #     labels_to_drop: []
  #     #  - ceems_ipmi_dcmi_avg_watts

  #     # Define queries that are used to estimate aggregate metrics of each compute unit
  #     # These queries will be passed to golang's text/template package to build them
  #     # Available template variables
  #     # - UUIDs -> UUIDs string delimited by "|", eg, 123|345|567
  #     # - ScrapeInterval -> Scrape interval of TSDB in time.Duration format eg 15s, 1m
  #     # - ScrapeIntervalMilli -> Scrape interval of TSDB in milli seconds eg 15000, 60000
  #     # - EvaluationInterval -> Evaluation interval of TSDB in time.Duration format eg 15s, 1m
  #     # - EvaluationIntervalMilli -> Evaluation interval of TSDB in milli seconds eg 15s, 1m
  #     # - RateInterval -> Rate interval in time.Duration format. It is estimated based on Scrape interval as 4*scrape_interval
  #     # - Range -> Duration of interval where aggregation is being made in time.Duration format
  #     #
  #     # It is possible to define multiple "sub-metrics" for each parent metric.
  #     # For instance, for the case of `total_cpu_energy_usage_kwh`, we wish to store
  #     # energy usage from different sources like RAPL, IPMI, we can do so using following
  #     # config:
  #     #
  #     # total_cpu_energy_usage_kwh:
  #     #   rapl_total: <TSDB query to get energy usage from RAPL for the unit>
  #     #   ipmi_total: <TSDB query to get energy usage from IPMI for the unit>
  #     #
  #     # With the above configuration, the server response from API server will contain
  #     # energy usage from both RAPL and IPMI using the same keys as we used in the 
  #     # sub query. For instance, an example response can be:
  #     #
  #     # `{"total_cpu_energy_usage_kwh": {"rapl_total": 100, "ipmi_total": 120}}`
  #     #
  #     # This approach will let the operators to define the metrics freely according to
  #     # their deployments. This will also allow to fetch metrics from third party 
  #     # DBs outside of CEEMS components without hassle.
  #     #
  #     # The placeholder queries shown below should work out-of-the-box with CEEMS 
  #     # exporter and operators are free to deploy more exporters of their own and use
  #     # the metrics from them to estimate aggregated metrics of each compute unit
  #     #
  #     queries: {}
  #       # # Average CPU utilisation
  #       # avg_cpu_usage: 
  #       #   global: |
  #       #     avg_over_time(
  #       #       avg by (uuid) (
  #       #         (
  #       #           rate(ceems_compute_unit_cpu_user_seconds_total{uuid=~"{{.UUIDs}}"}[{{.RateInterval}}])
  #       #           +
  #       #           rate(ceems_compute_unit_cpu_system_seconds_total{uuid=~"{{.UUIDs}}"}[{{.RateInterval}}])
  #       #         )
  #       #         /
  #       #         ceems_compute_unit_cpus{uuid=~"{{.UUIDs}}"}
  #       #       )[{{.Range}}:]
  #       #     ) * 100

  #       # # Average CPU Memory utilisation
  #       # avg_cpu_mem_usage: 
  #       #   global: |
  #       #     avg_over_time(
  #       #       avg by (uuid) (
  #       #         ceems_compute_unit_memory_used_bytes{uuid=~"{{.UUIDs}}"}
  #       #         /
  #       #         ceems_compute_unit_memory_total_bytes{uuid=~"{{.UUIDs}}"}
  #       #       )[{{.Range}}:]
  #       #     ) * 100

  #       # # Total CPU energy usage in kWh
  #       # total_cpu_energy_usage_kwh: 
  #       #   total: |
  #       #     sum_over_time(
  #       #       sum by (uuid) (
  #       #         unit:ceems_compute_unit_cpu_energy_usage:sum{uuid=~"{{.UUIDs}}"} * {{.ScrapeIntervalMilli}} / 3.6e9
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )

  #       # # Total CPU emissions in gms
  #       # total_cpu_emissions_gms: 
  #       #   rte_total: |
  #       #     sum_over_time(
  #       #       sum by (uuid) (
  #       #         label_replace(
  #       #           unit:ceems_compute_unit_cpu_energy_usage:sum{uuid=~"{{.UUIDs}}"} * {{.ScrapeIntervalMilli}} / 3.6e9,
  #       #           "common_label",
  #       #           "mock",
  #       #           "hostname",
  #       #           "(.*)"
  #       #         )
  #       #         * on (common_label) group_left ()
  #       #         label_replace(
  #       #           ceems_emissions_gCo2_kWh{provider="rte",country_code="fr"},
  #       #           "common_label",
  #       #           "mock",
  #       #           "hostname",
  #       #           "(.*)"
  #       #         )
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )
  #       #   emaps_total: |
  #       #     sum_over_time(
  #       #       sum by (uuid) (
  #       #         label_replace(
  #       #           unit:ceems_compute_unit_cpu_energy_usage:sum{uuid=~"{{.UUIDs}}"} * {{.ScrapeIntervalMilli}} / 3.6e9,
  #       #           "common_label",
  #       #           "mock",
  #       #           "hostname",
  #       #           "(.*)"
  #       #         )
  #       #         * on (common_label) group_left ()
  #       #         label_replace(
  #       #           ceems_emissions_gCo2_kWh{provider="emaps",country_code="fr"},
  #       #           "common_label",
  #       #           "mock",
  #       #           "hostname",
  #       #           "(.*)"
  #       #         )
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )

  #       # # Average GPU utilization
  #       # avg_gpu_usage: 
  #       #   global: |
  #       #     avg_over_time(
  #       #       avg by (uuid) (
  #       #         DCGM_FI_DEV_GPU_UTIL
  #       #         * on (gpuuuid) group_right ()
  #       #         ceems_compute_unit_gpu_index_flag{uuid=~"{{.UUIDs}}"}
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )

  #       # # Average GPU memory utilization
  #       # avg_gpu_mem_usage: 
  #       #   global: |
  #       #     avg_over_time(
  #       #       avg by (uuid) (
  #       #         DCGM_FI_DEV_MEM_COPY_UTIL
  #       #         * on (gpuuuid) group_right ()
  #       #         ceems_compute_unit_gpu_index_flag{uuid=~"{{.UUIDs}}"}
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )

  #       # # Total GPU energy usage in kWh
  #       # total_gpu_energy_usage_kwh: 
  #       #   total: |
  #       #     sum_over_time(
  #       #       sum by (uuid) (
  #       #         instance:DCGM_FI_DEV_POWER_USAGE:pue_avg * {{.ScrapeIntervalMilli}} / 3.6e9
  #       #         * on (gpuuuid) group_right()
  #       #         ceems_compute_unit_gpu_index_flag{uuid=~"{{.UUIDs}}"}
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )

  #       # # Total GPU emissions in gms
  #       # total_gpu_emissions_gms: 
  #       #   rte_total: |
  #       #     sum_over_time(
  #       #       sum by (uuid) (
  #       #         label_replace(
  #       #           instance:DCGM_FI_DEV_POWER_USAGE:pue_avg * {{.ScrapeIntervalMilli}} / 3.6e+09
  #       #           * on (gpuuuid) group_right ()
  #       #           ceems_compute_unit_gpu_index_flag{uuid=~"{{.UUIDs}}"},
  #       #           "common_label",
  #       #           "mock",
  #       #           "instance",
  #       #           "(.*)"
  #       #         )
  #       #         * on (common_label) group_left ()
  #       #         label_replace(
  #       #           ceems_emissions_gCo2_kWh{provider="rte",country_code="fr"},
  #       #           "common_label",
  #       #           "mock",
  #       #           "instance",
  #       #           "(.*)"
  #       #         )
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )
  #       #   emaps_total: |
  #       #     sum_over_time(
  #       #       sum by (uuid) (
  #       #         label_replace(
  #       #           instance:DCGM_FI_DEV_POWER_USAGE:pue_avg * {{.ScrapeIntervalMilli}} / 3.6e+09
  #       #           * on (gpuuuid) group_right ()
  #       #           ceems_compute_unit_gpu_index_flag{uuid=~"{{.UUIDs}}"},
  #       #           "common_label",
  #       #           "mock",
  #       #           "instance",
  #       #           "(.*)"
  #       #         )
  #       #         * on (common_label) group_left ()
  #       #         label_replace(
  #       #           ceems_emissions_gCo2_kWh{provider="emaps",country_code="fr"},
  #       #           "common_label",
  #       #           "mock",
  #       #           "instance",
  #       #           "(.*)"
  #       #         )
  #       #       )[{{.Range}}:{{.ScrapeInterval}}]
  #       #     )

  #       # # Total IO write stats
  #       # total_io_write_stats: 
  #       #   bytes: "<query to get total bytes written>"
  #       #   requests: "<query to get total write requests>"

  #       # # Total IO read stats
  #       # total_io_read_stats:
  #       #   bytes: "<query to get total bytes read>"
  #       #   requests: "<query to get total read requests>"

  #       # # Total ingress traffic stats
  #       # total_ingress_stats:
  #       #   bytes: "<query to get total bytes received>"
  #       #   packets: "<query to get total packets received>"
  #       #   errors: "<query to get total packets errored>"
  #       #   drops: "<query to get total packets dropped>"

  #       # # Total outgress traffic stats
  #       # total_outgress_stats:
  #       #   bytes: "<query to get total bytes received>"
  #       #   packets: "<query to get total packets received>"
  #       #   errors: "<query to get total packets errored>"
  #       #   drops: "<query to get total packets dropped>"
