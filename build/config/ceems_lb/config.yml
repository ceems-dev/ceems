# CEEMS LB config file
---

# Load balancing strategy. Three possibilites
# - round-robin
# - least-connection
# - resource-based
# Round robin and least connection are classic strategies.
# Resource based works based on the query range in the TSDB query. The 
# query will be proxied to the backend that covers the query_range
strategy: resource-based

# CEEMS API server config.
# This config is essential to enable access control on the TSDB. By excluding 
# this config, no access control is imposed on the TSDB and a basic load balancing
# based on the chosen strategy will be made.
#
# Essentially, basic access control is implemented by checking the ownership of the
# queried unit. Users that belong to the same project can query the units belong
# to that project. 
# 
# For example, if there is a unit U that belongs to User A and 
# Project P. Any user that belongs to same project P can query for the metrics of unit U
# but not users from other projects.
# ceems_api:
#
#   # The DB contains the information of user and projet units and LB will verify
#   # if user/project is the owner of the uuid under request to decide whether to
#   # proxy request to backend or not.
#   #
#   # To identify the current user, X-Grafana-User header will be used that Grafana
#   # is capable of sending to the datasource. Grafana essenatially adds this header
#   # on the backend server and hence it is not possible for the users to spoof this 
#   # header from the browser. 
#   # In order to enable this feature, it is essential to set `send_user_header = true`
#   # in Grafana config file.
#   #
#   # If both CEEMS API and CEEMS LB is running on the same host, it is preferable to
#   # use the DB directly using `db_path` as DB query is way faster than a API request
#   # If both apps are deployed on the same host, ensure that the user running `ceems_lb`
#   # has permissions to open CEEMS API DB
#   db_path: /var/lib/ceems_api_server/ceems_api_server.db
#
#   # In the case where CEEMS API and ceems LB are deployed on different hosts, we can
#   # still perform access control using CEEMS API server by making a API request to
#   # check the ownership of the queried unit. This method should be only preferred when
#   # DB cannot be access directly as API request has additional latency than querying DB
#   # directly.
#   #
#   # If both `db_path` and `url` are provdided, DB will be preferred as it has lower
#   # latencies.
#   #
#   # Basic auth and TLS are supported.
#   url: http://localhost:9020
#
#   # If TLS certificates are self signed, set this parameter to true to skip TLS
#   # certificate verification
#   skip_tls_verify: false

# List of admin users. 
# Requests from users defined in this list will be passed through without 
# any additional checks. This allows admin users to be able to access 
# dashboards of _any_ user.
# admin_users: []

# Grafana configuration.
# Besides the admin_users defined statically in the config, LB is capable of
# synchronizing users from a given Grafana Team to add the users of this team
# to the admin users. The synchronization is done every 2 hours and thus, whenever
# a new user is added to Grafana Team, that user will have access to be able to
# access dashboards of all users by skipping additional checks
# grafana:
#
#   # URL at which Grafana is running. If Grafana and CEEMS LB are running on the 
#   # same host, use the localhost. Else use the public URL of Grafana instance
#   url: http://localhost:3000
#
#   # If Grafana is using self signed TLS, set this option to true to skip TLS
#   # certificate check
#   skip_tls_verify: false
#
#   # The ID of the Grafana team to fetch the users from. 
#   # IMPORTANT: The CEEMS LB service should have a GRAFANA_API_TOKEN environment
#   # variable set to be able to fetch members of this Grafana team.
#   # Operators can create a service account and create a API token with admin scope
#   # in this service accoount and use that token for CEEMS LB service.
#   admin_team_id: 1

# TLS is not supported for backends. CEEMS LB supports TLS and TLS terminates
# at the LB and requests are proxied to backends on HTTP. 
#
# LB and backend servers are meant to be in the same DMZ so that we do not need
# to encrypt communications. Backends however support basic auth and they can 
# be configured in URL with usual syntax.
backends:
  - url: "http://localhost:9090"
  
  # An example of configuring the basic auth username and password with backend
  # - url: "http://alice:password@localhost:9091"
